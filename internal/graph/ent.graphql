directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Author implements Node {
  id: ID!
  name: String!
  sort: String!
  link: String
  books: [Book!]
}
"""A connection to a list of items."""
type AuthorConnection {
  """A list of edges."""
  edges: [AuthorEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Author connections"""
input AuthorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Authors."""
  field: AuthorOrderField!
}
"""Properties by which Author connections can be ordered."""
enum AuthorOrderField {
  NAME
  SORT
}
"""
AuthorWhereInput is used for filtering Author objects.
Input was generated by ent.
"""
input AuthorWhereInput {
  not: AuthorWhereInput
  and: [AuthorWhereInput!]
  or: [AuthorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """sort field predicates"""
  sort: String
  sortNEQ: String
  sortIn: [String!]
  sortNotIn: [String!]
  sortGT: String
  sortGTE: String
  sortLT: String
  sortLTE: String
  sortContains: String
  sortHasPrefix: String
  sortHasSuffix: String
  sortEqualFold: String
  sortContainsFold: String
  """link field predicates"""
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkIsNil: Boolean
  linkNotNil: Boolean
  linkEqualFold: String
  linkContainsFold: String
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
type Book implements Node {
  id: ID!
  title: String!
  sort: String!
  addedat: Time! @goField(name: "AddedAt", forceResolver: false)
  pubdate: Time @goField(name: "PubDate", forceResolver: false)
  path: String!
  isbn: String
  description: String
  authors: [Author!]
}
"""A connection to a list of items."""
type BookConnection {
  """A list of edges."""
  edges: [BookEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Book connections"""
input BookOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Books."""
  field: BookOrderField!
}
"""Properties by which Book connections can be ordered."""
enum BookOrderField {
  TITLE
  SORT
  ADDED_AT
  PUB_DATE
  ISBN
}
"""
BookWhereInput is used for filtering Book objects.
Input was generated by ent.
"""
input BookWhereInput {
  not: BookWhereInput
  and: [BookWhereInput!]
  or: [BookWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """sort field predicates"""
  sort: String
  sortNEQ: String
  sortIn: [String!]
  sortNotIn: [String!]
  sortGT: String
  sortGTE: String
  sortLT: String
  sortLTE: String
  sortContains: String
  sortHasPrefix: String
  sortHasSuffix: String
  sortEqualFold: String
  sortContainsFold: String
  """addedAt field predicates"""
  addedat: Time
  addedatNEQ: Time
  addedatIn: [Time!]
  addedatNotIn: [Time!]
  addedatGT: Time
  addedatGTE: Time
  addedatLT: Time
  addedatLTE: Time
  """pubDate field predicates"""
  pubdate: Time
  pubdateNEQ: Time
  pubdateIn: [Time!]
  pubdateNotIn: [Time!]
  pubdateGT: Time
  pubdateGTE: Time
  pubdateLT: Time
  pubdateLTE: Time
  pubdateIsNil: Boolean
  pubdateNotNil: Boolean
  """path field predicates"""
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """isbn field predicates"""
  isbn: String
  isbnNEQ: String
  isbnIn: [String!]
  isbnNotIn: [String!]
  isbnGT: String
  isbnGTE: String
  isbnLT: String
  isbnLTE: String
  isbnContains: String
  isbnHasPrefix: String
  isbnHasSuffix: String
  isbnIsNil: Boolean
  isbnNotNil: Boolean
  isbnEqualFold: String
  isbnContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """authors edge predicates"""
  hasAuthors: Boolean
  hasAuthorsWith: [AuthorWhereInput!]
}
"""
CreateAuthorInput is used for create Author object.
Input was generated by ent.
"""
input CreateAuthorInput {
  name: String!
  sort: String!
  link: String
  bookIDs: [ID!]
}
"""
CreateBookInput is used for create Book object.
Input was generated by ent.
"""
input CreateBookInput {
  title: String!
  sort: String!
  addedat: Time
  pubdate: Time
  path: String!
  isbn: String
  description: String
  authorIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "lybbrio/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  authors(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Authors returned from the connection."""
    orderBy: [AuthorOrder!]

    """Filtering options for Authors returned from the connection."""
    where: AuthorWhereInput
  ): AuthorConnection!
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateAuthorInput is used for update Author object.
Input was generated by ent.
"""
input UpdateAuthorInput {
  name: String
  sort: String
  link: String
  clearLink: Boolean
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdateBookInput is used for update Book object.
Input was generated by ent.
"""
input UpdateBookInput {
  title: String
  sort: String
  addedat: Time
  pubdate: Time
  clearPubDate: Boolean
  path: String
  isbn: String
  clearIsbn: Boolean
  description: String
  clearDescription: Boolean
  addAuthorIDs: [ID!]
  removeAuthorIDs: [ID!]
  clearAuthors: Boolean
}
