// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/shelf"
	"lybbrio/internal/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShelfCreate is the builder for creating a Shelf entity.
type ShelfCreate struct {
	config
	mutation *ShelfMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *ShelfCreate) SetName(s string) *ShelfCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *ShelfCreate) SetDescription(s string) *ShelfCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *ShelfCreate) SetNillableDescription(s *string) *ShelfCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetPublic sets the "public" field.
func (sc *ShelfCreate) SetPublic(b bool) *ShelfCreate {
	sc.mutation.SetPublic(b)
	return sc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (sc *ShelfCreate) SetNillablePublic(b *bool) *ShelfCreate {
	if b != nil {
		sc.SetPublic(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ShelfCreate) SetID(k ksuid.ID) *ShelfCreate {
	sc.mutation.SetID(k)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ShelfCreate) SetNillableID(k *ksuid.ID) *ShelfCreate {
	if k != nil {
		sc.SetID(*k)
	}
	return sc
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (sc *ShelfCreate) AddBookIDs(ids ...ksuid.ID) *ShelfCreate {
	sc.mutation.AddBookIDs(ids...)
	return sc
}

// AddBooks adds the "books" edges to the Book entity.
func (sc *ShelfCreate) AddBooks(b ...*Book) *ShelfCreate {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sc.AddBookIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *ShelfCreate) SetOwnerID(id ksuid.ID) *ShelfCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (sc *ShelfCreate) SetNillableOwnerID(id *ksuid.ID) *ShelfCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *ShelfCreate) SetOwner(u *User) *ShelfCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the ShelfMutation object of the builder.
func (sc *ShelfCreate) Mutation() *ShelfMutation {
	return sc.mutation
}

// Save creates the Shelf in the database.
func (sc *ShelfCreate) Save(ctx context.Context) (*Shelf, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShelfCreate) SaveX(ctx context.Context) *Shelf {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShelfCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShelfCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShelfCreate) defaults() {
	if _, ok := sc.mutation.Public(); !ok {
		v := shelf.DefaultPublic
		sc.mutation.SetPublic(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := shelf.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShelfCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Shelf.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := shelf.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Shelf.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "Shelf.public"`)}
	}
	return nil
}

func (sc *ShelfCreate) sqlSave(ctx context.Context) (*Shelf, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Shelf.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShelfCreate) createSpec() (*Shelf, *sqlgraph.CreateSpec) {
	var (
		_node = &Shelf{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shelf.Table, sqlgraph.NewFieldSpec(shelf.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(shelf.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(shelf.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Public(); ok {
		_spec.SetField(shelf.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if nodes := sc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shelf.BooksTable,
			Columns: shelf.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shelf.OwnerTable,
			Columns: []string{shelf.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_shelves = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShelfCreateBulk is the builder for creating many Shelf entities in bulk.
type ShelfCreateBulk struct {
	config
	err      error
	builders []*ShelfCreate
}

// Save creates the Shelf entities in the database.
func (scb *ShelfCreateBulk) Save(ctx context.Context) ([]*Shelf, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shelf, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShelfMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShelfCreateBulk) SaveX(ctx context.Context) []*Shelf {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShelfCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShelfCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
