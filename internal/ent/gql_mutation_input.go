// Code generated by ent, DO NOT EDIT.

package ent

import (
	"lybbrio/internal/ent/schema/ksuid"
	"time"
)

// CreateAuthorInput represents a mutation input for creating authors.
type CreateAuthorInput struct {
	Name    string
	Sort    string
	Link    *string
	BookIDs []ksuid.ID
}

// Mutate applies the CreateAuthorInput on the AuthorMutation builder.
func (i *CreateAuthorInput) Mutate(m *AuthorMutation) {
	m.SetName(i.Name)
	m.SetSort(i.Sort)
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAuthorInput on the AuthorCreate builder.
func (c *AuthorCreate) SetInput(i CreateAuthorInput) *AuthorCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAuthorInput represents a mutation input for updating authors.
type UpdateAuthorInput struct {
	Name          *string
	Sort          *string
	ClearLink     bool
	Link          *string
	ClearBooks    bool
	AddBookIDs    []ksuid.ID
	RemoveBookIDs []ksuid.ID
}

// Mutate applies the UpdateAuthorInput on the AuthorMutation builder.
func (i *UpdateAuthorInput) Mutate(m *AuthorMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearLink {
		m.ClearLink()
	}
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAuthorInput on the AuthorUpdate builder.
func (c *AuthorUpdate) SetInput(i UpdateAuthorInput) *AuthorUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAuthorInput on the AuthorUpdateOne builder.
func (c *AuthorUpdateOne) SetInput(i UpdateAuthorInput) *AuthorUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookInput represents a mutation input for creating books.
type CreateBookInput struct {
	Title       string
	Sort        string
	AddedAt     *time.Time
	PubDate     *time.Time
	Path        string
	Isbn        *string
	Description *string
	AuthorIDs   []ksuid.ID
}

// Mutate applies the CreateBookInput on the BookMutation builder.
func (i *CreateBookInput) Mutate(m *BookMutation) {
	m.SetTitle(i.Title)
	m.SetSort(i.Sort)
	if v := i.AddedAt; v != nil {
		m.SetAddedAt(*v)
	}
	if v := i.PubDate; v != nil {
		m.SetPubDate(*v)
	}
	m.SetPath(i.Path)
	if v := i.Isbn; v != nil {
		m.SetIsbn(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBookInput on the BookCreate builder.
func (c *BookCreate) SetInput(i CreateBookInput) *BookCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookInput represents a mutation input for updating books.
type UpdateBookInput struct {
	Title            *string
	Sort             *string
	AddedAt          *time.Time
	ClearPubDate     bool
	PubDate          *time.Time
	Path             *string
	ClearIsbn        bool
	Isbn             *string
	ClearDescription bool
	Description      *string
	ClearAuthors     bool
	AddAuthorIDs     []ksuid.ID
	RemoveAuthorIDs  []ksuid.ID
}

// Mutate applies the UpdateBookInput on the BookMutation builder.
func (i *UpdateBookInput) Mutate(m *BookMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.AddedAt; v != nil {
		m.SetAddedAt(*v)
	}
	if i.ClearPubDate {
		m.ClearPubDate()
	}
	if v := i.PubDate; v != nil {
		m.SetPubDate(*v)
	}
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if i.ClearIsbn {
		m.ClearIsbn()
	}
	if v := i.Isbn; v != nil {
		m.SetIsbn(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdate builder.
func (c *BookUpdate) SetInput(i UpdateBookInput) *BookUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdateOne builder.
func (c *BookUpdateOne) SetInput(i UpdateBookInput) *BookUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
