// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AuthorQuery) CollectFields(ctx context.Context, satisfies ...string) (*AuthorQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AuthorQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(author.Columns))
		selectedFields = []string{author.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "books":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&BookClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedBooks(alias, func(wq *BookQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[author.FieldName]; !ok {
				selectedFields = append(selectedFields, author.FieldName)
				fieldSeen[author.FieldName] = struct{}{}
			}
		case "sort":
			if _, ok := fieldSeen[author.FieldSort]; !ok {
				selectedFields = append(selectedFields, author.FieldSort)
				fieldSeen[author.FieldSort] = struct{}{}
			}
		case "link":
			if _, ok := fieldSeen[author.FieldLink]; !ok {
				selectedFields = append(selectedFields, author.FieldLink)
				fieldSeen[author.FieldLink] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type authorPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AuthorPaginateOption
}

func newAuthorPaginateArgs(rv map[string]any) *authorPaginateArgs {
	args := &authorPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*AuthorOrder:
			args.opts = append(args.opts, WithAuthorOrder(v))
		case []any:
			var orders []*AuthorOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &AuthorOrder{Field: &AuthorOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithAuthorOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*AuthorWhereInput); ok {
		args.opts = append(args.opts, WithAuthorFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (b *BookQuery) CollectFields(ctx context.Context, satisfies ...string) (*BookQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return b, nil
	}
	if err := b.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return b, nil
}

func (b *BookQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(book.Columns))
		selectedFields = []string{book.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "authors":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AuthorClient{config: b.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			b.WithNamedAuthors(alias, func(wq *AuthorQuery) {
				*wq = *query
			})
		case "title":
			if _, ok := fieldSeen[book.FieldTitle]; !ok {
				selectedFields = append(selectedFields, book.FieldTitle)
				fieldSeen[book.FieldTitle] = struct{}{}
			}
		case "sort":
			if _, ok := fieldSeen[book.FieldSort]; !ok {
				selectedFields = append(selectedFields, book.FieldSort)
				fieldSeen[book.FieldSort] = struct{}{}
			}
		case "addedat":
			if _, ok := fieldSeen[book.FieldAddedAt]; !ok {
				selectedFields = append(selectedFields, book.FieldAddedAt)
				fieldSeen[book.FieldAddedAt] = struct{}{}
			}
		case "pubdate":
			if _, ok := fieldSeen[book.FieldPubDate]; !ok {
				selectedFields = append(selectedFields, book.FieldPubDate)
				fieldSeen[book.FieldPubDate] = struct{}{}
			}
		case "path":
			if _, ok := fieldSeen[book.FieldPath]; !ok {
				selectedFields = append(selectedFields, book.FieldPath)
				fieldSeen[book.FieldPath] = struct{}{}
			}
		case "isbn":
			if _, ok := fieldSeen[book.FieldIsbn]; !ok {
				selectedFields = append(selectedFields, book.FieldIsbn)
				fieldSeen[book.FieldIsbn] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[book.FieldDescription]; !ok {
				selectedFields = append(selectedFields, book.FieldDescription)
				fieldSeen[book.FieldDescription] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		b.Select(selectedFields...)
	}
	return nil
}

type bookPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []BookPaginateOption
}

func newBookPaginateArgs(rv map[string]any) *bookPaginateArgs {
	args := &bookPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*BookOrder:
			args.opts = append(args.opts, WithBookOrder(v))
		case []any:
			var orders []*BookOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &BookOrder{Field: &BookOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithBookOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*BookWhereInput); ok {
		args.opts = append(args.opts, WithBookFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
