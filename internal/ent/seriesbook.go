// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/series"
	"lybbrio/internal/ent/seriesbook"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SeriesBook is the model entity for the SeriesBook schema.
type SeriesBook struct {
	config `json:"-"`
	// SeriesIndex holds the value of the "series_index" field.
	SeriesIndex float64 `json:"series_index,omitempty"`
	// SeriesID holds the value of the "series_id" field.
	SeriesID ksuid.ID `json:"series_id,omitempty"`
	// BookID holds the value of the "book_id" field.
	BookID ksuid.ID `json:"book_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeriesBookQuery when eager-loading is set.
	Edges        SeriesBookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeriesBookEdges holds the relations/edges for other nodes in the graph.
type SeriesBookEdges struct {
	// Series holds the value of the series edge.
	Series *Series `json:"series,omitempty"`
	// Book holds the value of the book edge.
	Book *Book `json:"book,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeriesBookEdges) SeriesOrErr() (*Series, error) {
	if e.loadedTypes[0] {
		if e.Series == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: series.Label}
		}
		return e.Series, nil
	}
	return nil, &NotLoadedError{edge: "series"}
}

// BookOrErr returns the Book value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeriesBookEdges) BookOrErr() (*Book, error) {
	if e.loadedTypes[1] {
		if e.Book == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: book.Label}
		}
		return e.Book, nil
	}
	return nil, &NotLoadedError{edge: "book"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeriesBook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seriesbook.FieldSeriesIndex:
			values[i] = new(sql.NullFloat64)
		case seriesbook.FieldSeriesID, seriesbook.FieldBookID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeriesBook fields.
func (sb *SeriesBook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seriesbook.FieldSeriesIndex:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field series_index", values[i])
			} else if value.Valid {
				sb.SeriesIndex = value.Float64
			}
		case seriesbook.FieldSeriesID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field series_id", values[i])
			} else if value.Valid {
				sb.SeriesID = ksuid.ID(value.String)
			}
		case seriesbook.FieldBookID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field book_id", values[i])
			} else if value.Valid {
				sb.BookID = ksuid.ID(value.String)
			}
		default:
			sb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SeriesBook.
// This includes values selected through modifiers, order, etc.
func (sb *SeriesBook) Value(name string) (ent.Value, error) {
	return sb.selectValues.Get(name)
}

// QuerySeries queries the "series" edge of the SeriesBook entity.
func (sb *SeriesBook) QuerySeries() *SeriesQuery {
	return NewSeriesBookClient(sb.config).QuerySeries(sb)
}

// QueryBook queries the "book" edge of the SeriesBook entity.
func (sb *SeriesBook) QueryBook() *BookQuery {
	return NewSeriesBookClient(sb.config).QueryBook(sb)
}

// Update returns a builder for updating this SeriesBook.
// Note that you need to call SeriesBook.Unwrap() before calling this method if this SeriesBook
// was returned from a transaction, and the transaction was committed or rolled back.
func (sb *SeriesBook) Update() *SeriesBookUpdateOne {
	return NewSeriesBookClient(sb.config).UpdateOne(sb)
}

// Unwrap unwraps the SeriesBook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sb *SeriesBook) Unwrap() *SeriesBook {
	_tx, ok := sb.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeriesBook is not a transactional entity")
	}
	sb.config.driver = _tx.drv
	return sb
}

// String implements the fmt.Stringer.
func (sb *SeriesBook) String() string {
	var builder strings.Builder
	builder.WriteString("SeriesBook(")
	builder.WriteString("series_index=")
	builder.WriteString(fmt.Sprintf("%v", sb.SeriesIndex))
	builder.WriteString(", ")
	builder.WriteString("series_id=")
	builder.WriteString(fmt.Sprintf("%v", sb.SeriesID))
	builder.WriteString(", ")
	builder.WriteString("book_id=")
	builder.WriteString(fmt.Sprintf("%v", sb.BookID))
	builder.WriteByte(')')
	return builder.String()
}

// SeriesBooks is a parsable slice of SeriesBook.
type SeriesBooks []*SeriesBook
