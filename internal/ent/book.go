// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/language"
	"lybbrio/internal/ent/schema/ksuid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID ksuid.ID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort string `json:"sort,omitempty"`
	// PublishedDate holds the value of the "published_date" field.
	PublishedDate time.Time `json:"published_date,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Isbn holds the value of the "isbn" field.
	Isbn string `json:"isbn,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SeriesIndex holds the value of the "series_index" field.
	SeriesIndex int `json:"series_index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges           BookEdges `json:"edges"`
	language_books  *ksuid.ID
	publisher_books *ksuid.ID
	tag_books       *ksuid.ID
	selectValues    sql.SelectValues
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// Authors holds the value of the authors edge.
	Authors []*Author `json:"authors,omitempty"`
	// Series holds the value of the series edge.
	Series []*Series `json:"series,omitempty"`
	// Identifier holds the value of the identifier edge.
	Identifier []*Identifier `json:"identifier,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// Shelf holds the value of the shelf edge.
	Shelf []*Shelf `json:"shelf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedAuthors    map[string][]*Author
	namedSeries     map[string][]*Series
	namedIdentifier map[string][]*Identifier
	namedShelf      map[string][]*Shelf
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) AuthorsOrErr() ([]*Author, error) {
	if e.loadedTypes[0] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) SeriesOrErr() ([]*Series, error) {
	if e.loadedTypes[1] {
		return e.Series, nil
	}
	return nil, &NotLoadedError{edge: "series"}
}

// IdentifierOrErr returns the Identifier value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) IdentifierOrErr() ([]*Identifier, error) {
	if e.loadedTypes[2] {
		return e.Identifier, nil
	}
	return nil, &NotLoadedError{edge: "identifier"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) LanguageOrErr() (*Language, error) {
	if e.loadedTypes[3] {
		if e.Language == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: language.Label}
		}
		return e.Language, nil
	}
	return nil, &NotLoadedError{edge: "language"}
}

// ShelfOrErr returns the Shelf value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) ShelfOrErr() ([]*Shelf, error) {
	if e.loadedTypes[4] {
		return e.Shelf, nil
	}
	return nil, &NotLoadedError{edge: "shelf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldSeriesIndex:
			values[i] = new(sql.NullInt64)
		case book.FieldID, book.FieldTitle, book.FieldSort, book.FieldPath, book.FieldIsbn, book.FieldDescription:
			values[i] = new(sql.NullString)
		case book.FieldPublishedDate:
			values[i] = new(sql.NullTime)
		case book.ForeignKeys[0]: // language_books
			values[i] = new(sql.NullString)
		case book.ForeignKeys[1]: // publisher_books
			values[i] = new(sql.NullString)
		case book.ForeignKeys[2]: // tag_books
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = ksuid.ID(value.String)
			}
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldSort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				b.Sort = value.String
			}
		case book.FieldPublishedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_date", values[i])
			} else if value.Valid {
				b.PublishedDate = value.Time
			}
		case book.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				b.Path = value.String
			}
		case book.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				b.Isbn = value.String
			}
		case book.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				b.Description = value.String
			}
		case book.FieldSeriesIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field series_index", values[i])
			} else if value.Valid {
				b.SeriesIndex = int(value.Int64)
			}
		case book.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_books", values[i])
			} else if value.Valid {
				b.language_books = new(ksuid.ID)
				*b.language_books = ksuid.ID(value.String)
			}
		case book.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_books", values[i])
			} else if value.Valid {
				b.publisher_books = new(ksuid.ID)
				*b.publisher_books = ksuid.ID(value.String)
			}
		case book.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_books", values[i])
			} else if value.Valid {
				b.tag_books = new(ksuid.ID)
				*b.tag_books = ksuid.ID(value.String)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryAuthors queries the "authors" edge of the Book entity.
func (b *Book) QueryAuthors() *AuthorQuery {
	return NewBookClient(b.config).QueryAuthors(b)
}

// QuerySeries queries the "series" edge of the Book entity.
func (b *Book) QuerySeries() *SeriesQuery {
	return NewBookClient(b.config).QuerySeries(b)
}

// QueryIdentifier queries the "identifier" edge of the Book entity.
func (b *Book) QueryIdentifier() *IdentifierQuery {
	return NewBookClient(b.config).QueryIdentifier(b)
}

// QueryLanguage queries the "language" edge of the Book entity.
func (b *Book) QueryLanguage() *LanguageQuery {
	return NewBookClient(b.config).QueryLanguage(b)
}

// QueryShelf queries the "shelf" edge of the Book entity.
func (b *Book) QueryShelf() *ShelfQuery {
	return NewBookClient(b.config).QueryShelf(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(b.Sort)
	builder.WriteString(", ")
	builder.WriteString("published_date=")
	builder.WriteString(b.PublishedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(b.Path)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(b.Isbn)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(b.Description)
	builder.WriteString(", ")
	builder.WriteString("series_index=")
	builder.WriteString(fmt.Sprintf("%v", b.SeriesIndex))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthors returns the Authors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedAuthors(name string) ([]*Author, error) {
	if b.Edges.namedAuthors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedAuthors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedAuthors(name string, edges ...*Author) {
	if b.Edges.namedAuthors == nil {
		b.Edges.namedAuthors = make(map[string][]*Author)
	}
	if len(edges) == 0 {
		b.Edges.namedAuthors[name] = []*Author{}
	} else {
		b.Edges.namedAuthors[name] = append(b.Edges.namedAuthors[name], edges...)
	}
}

// NamedSeries returns the Series named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedSeries(name string) ([]*Series, error) {
	if b.Edges.namedSeries == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedSeries[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedSeries(name string, edges ...*Series) {
	if b.Edges.namedSeries == nil {
		b.Edges.namedSeries = make(map[string][]*Series)
	}
	if len(edges) == 0 {
		b.Edges.namedSeries[name] = []*Series{}
	} else {
		b.Edges.namedSeries[name] = append(b.Edges.namedSeries[name], edges...)
	}
}

// NamedIdentifier returns the Identifier named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedIdentifier(name string) ([]*Identifier, error) {
	if b.Edges.namedIdentifier == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedIdentifier[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedIdentifier(name string, edges ...*Identifier) {
	if b.Edges.namedIdentifier == nil {
		b.Edges.namedIdentifier = make(map[string][]*Identifier)
	}
	if len(edges) == 0 {
		b.Edges.namedIdentifier[name] = []*Identifier{}
	} else {
		b.Edges.namedIdentifier[name] = append(b.Edges.namedIdentifier[name], edges...)
	}
}

// NamedShelf returns the Shelf named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedShelf(name string) ([]*Shelf, error) {
	if b.Edges.namedShelf == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedShelf[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedShelf(name string, edges ...*Shelf) {
	if b.Edges.namedShelf == nil {
		b.Edges.namedShelf = make(map[string][]*Shelf)
	}
	if len(edges) == 0 {
		b.Edges.namedShelf[name] = []*Shelf{}
	} else {
		b.Edges.namedShelf[name] = append(b.Edges.namedShelf[name], edges...)
	}
}

// Books is a parsable slice of Book.
type Books []*Book
