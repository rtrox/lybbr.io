// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/user"
	"lybbrio/internal/ent/userpermissions"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPermissionsCreate is the builder for creating a UserPermissions entity.
type UserPermissionsCreate struct {
	config
	mutation *UserPermissionsMutation
	hooks    []Hook
}

// SetAdmin sets the "admin" field.
func (upc *UserPermissionsCreate) SetAdmin(b bool) *UserPermissionsCreate {
	upc.mutation.SetAdmin(b)
	return upc
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (upc *UserPermissionsCreate) SetNillableAdmin(b *bool) *UserPermissionsCreate {
	if b != nil {
		upc.SetAdmin(*b)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserPermissionsCreate) SetID(k ksuid.ID) *UserPermissionsCreate {
	upc.mutation.SetID(k)
	return upc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (upc *UserPermissionsCreate) SetNillableID(k *ksuid.ID) *UserPermissionsCreate {
	if k != nil {
		upc.SetID(*k)
	}
	return upc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upc *UserPermissionsCreate) SetUserID(id ksuid.ID) *UserPermissionsCreate {
	upc.mutation.SetUserID(id)
	return upc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (upc *UserPermissionsCreate) SetNillableUserID(id *ksuid.ID) *UserPermissionsCreate {
	if id != nil {
		upc = upc.SetUserID(*id)
	}
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserPermissionsCreate) SetUser(u *User) *UserPermissionsCreate {
	return upc.SetUserID(u.ID)
}

// Mutation returns the UserPermissionsMutation object of the builder.
func (upc *UserPermissionsCreate) Mutation() *UserPermissionsMutation {
	return upc.mutation
}

// Save creates the UserPermissions in the database.
func (upc *UserPermissionsCreate) Save(ctx context.Context) (*UserPermissions, error) {
	if err := upc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPermissionsCreate) SaveX(ctx context.Context) *UserPermissions {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPermissionsCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPermissionsCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserPermissionsCreate) defaults() error {
	if _, ok := upc.mutation.Admin(); !ok {
		v := userpermissions.DefaultAdmin
		upc.mutation.SetAdmin(v)
	}
	if _, ok := upc.mutation.ID(); !ok {
		if userpermissions.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized userpermissions.DefaultID (forgotten import ent/runtime?)")
		}
		v := userpermissions.DefaultID()
		upc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPermissionsCreate) check() error {
	if _, ok := upc.mutation.Admin(); !ok {
		return &ValidationError{Name: "admin", err: errors.New(`ent: missing required field "UserPermissions.admin"`)}
	}
	return nil
}

func (upc *UserPermissionsCreate) sqlSave(ctx context.Context) (*UserPermissions, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserPermissions.ID type: %T", _spec.ID.Value)
		}
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPermissionsCreate) createSpec() (*UserPermissions, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPermissions{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpermissions.Table, sqlgraph.NewFieldSpec(userpermissions.FieldID, field.TypeString))
	)
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := upc.mutation.Admin(); ok {
		_spec.SetField(userpermissions.FieldAdmin, field.TypeBool, value)
		_node.Admin = value
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpermissions.UserTable,
			Columns: []string{userpermissions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_permissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserPermissionsCreateBulk is the builder for creating many UserPermissions entities in bulk.
type UserPermissionsCreateBulk struct {
	config
	err      error
	builders []*UserPermissionsCreate
}

// Save creates the UserPermissions entities in the database.
func (upcb *UserPermissionsCreateBulk) Save(ctx context.Context) ([]*UserPermissions, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPermissions, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPermissionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPermissionsCreateBulk) SaveX(ctx context.Context) []*UserPermissions {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPermissionsCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPermissionsCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}
