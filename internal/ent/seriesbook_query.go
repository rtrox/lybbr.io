// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/series"
	"lybbrio/internal/ent/seriesbook"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeriesBookQuery is the builder for querying SeriesBook entities.
type SeriesBookQuery struct {
	config
	ctx        *QueryContext
	order      []seriesbook.OrderOption
	inters     []Interceptor
	predicates []predicate.SeriesBook
	withSeries *SeriesQuery
	withBook   *BookQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*SeriesBook) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SeriesBookQuery builder.
func (sbq *SeriesBookQuery) Where(ps ...predicate.SeriesBook) *SeriesBookQuery {
	sbq.predicates = append(sbq.predicates, ps...)
	return sbq
}

// Limit the number of records to be returned by this query.
func (sbq *SeriesBookQuery) Limit(limit int) *SeriesBookQuery {
	sbq.ctx.Limit = &limit
	return sbq
}

// Offset to start from.
func (sbq *SeriesBookQuery) Offset(offset int) *SeriesBookQuery {
	sbq.ctx.Offset = &offset
	return sbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sbq *SeriesBookQuery) Unique(unique bool) *SeriesBookQuery {
	sbq.ctx.Unique = &unique
	return sbq
}

// Order specifies how the records should be ordered.
func (sbq *SeriesBookQuery) Order(o ...seriesbook.OrderOption) *SeriesBookQuery {
	sbq.order = append(sbq.order, o...)
	return sbq
}

// QuerySeries chains the current query on the "series" edge.
func (sbq *SeriesBookQuery) QuerySeries() *SeriesQuery {
	query := (&SeriesClient{config: sbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seriesbook.Table, seriesbook.FieldID, selector),
			sqlgraph.To(series.Table, series.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seriesbook.SeriesTable, seriesbook.SeriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBook chains the current query on the "book" edge.
func (sbq *SeriesBookQuery) QueryBook() *BookQuery {
	query := (&BookClient{config: sbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seriesbook.Table, seriesbook.FieldID, selector),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seriesbook.BookTable, seriesbook.BookColumn),
		)
		fromU = sqlgraph.SetNeighbors(sbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SeriesBook entity from the query.
// Returns a *NotFoundError when no SeriesBook was found.
func (sbq *SeriesBookQuery) First(ctx context.Context) (*SeriesBook, error) {
	nodes, err := sbq.Limit(1).All(setContextOp(ctx, sbq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{seriesbook.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sbq *SeriesBookQuery) FirstX(ctx context.Context) *SeriesBook {
	node, err := sbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SeriesBook ID from the query.
// Returns a *NotFoundError when no SeriesBook ID was found.
func (sbq *SeriesBookQuery) FirstID(ctx context.Context) (id ksuid.ID, err error) {
	var ids []ksuid.ID
	if ids, err = sbq.Limit(1).IDs(setContextOp(ctx, sbq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{seriesbook.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sbq *SeriesBookQuery) FirstIDX(ctx context.Context) ksuid.ID {
	id, err := sbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SeriesBook entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SeriesBook entity is found.
// Returns a *NotFoundError when no SeriesBook entities are found.
func (sbq *SeriesBookQuery) Only(ctx context.Context) (*SeriesBook, error) {
	nodes, err := sbq.Limit(2).All(setContextOp(ctx, sbq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{seriesbook.Label}
	default:
		return nil, &NotSingularError{seriesbook.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sbq *SeriesBookQuery) OnlyX(ctx context.Context) *SeriesBook {
	node, err := sbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SeriesBook ID in the query.
// Returns a *NotSingularError when more than one SeriesBook ID is found.
// Returns a *NotFoundError when no entities are found.
func (sbq *SeriesBookQuery) OnlyID(ctx context.Context) (id ksuid.ID, err error) {
	var ids []ksuid.ID
	if ids, err = sbq.Limit(2).IDs(setContextOp(ctx, sbq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{seriesbook.Label}
	default:
		err = &NotSingularError{seriesbook.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sbq *SeriesBookQuery) OnlyIDX(ctx context.Context) ksuid.ID {
	id, err := sbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SeriesBooks.
func (sbq *SeriesBookQuery) All(ctx context.Context) ([]*SeriesBook, error) {
	ctx = setContextOp(ctx, sbq.ctx, "All")
	if err := sbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SeriesBook, *SeriesBookQuery]()
	return withInterceptors[[]*SeriesBook](ctx, sbq, qr, sbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sbq *SeriesBookQuery) AllX(ctx context.Context) []*SeriesBook {
	nodes, err := sbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SeriesBook IDs.
func (sbq *SeriesBookQuery) IDs(ctx context.Context) (ids []ksuid.ID, err error) {
	if sbq.ctx.Unique == nil && sbq.path != nil {
		sbq.Unique(true)
	}
	ctx = setContextOp(ctx, sbq.ctx, "IDs")
	if err = sbq.Select(seriesbook.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sbq *SeriesBookQuery) IDsX(ctx context.Context) []ksuid.ID {
	ids, err := sbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sbq *SeriesBookQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sbq.ctx, "Count")
	if err := sbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sbq, querierCount[*SeriesBookQuery](), sbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sbq *SeriesBookQuery) CountX(ctx context.Context) int {
	count, err := sbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sbq *SeriesBookQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sbq.ctx, "Exist")
	switch _, err := sbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sbq *SeriesBookQuery) ExistX(ctx context.Context) bool {
	exist, err := sbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SeriesBookQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sbq *SeriesBookQuery) Clone() *SeriesBookQuery {
	if sbq == nil {
		return nil
	}
	return &SeriesBookQuery{
		config:     sbq.config,
		ctx:        sbq.ctx.Clone(),
		order:      append([]seriesbook.OrderOption{}, sbq.order...),
		inters:     append([]Interceptor{}, sbq.inters...),
		predicates: append([]predicate.SeriesBook{}, sbq.predicates...),
		withSeries: sbq.withSeries.Clone(),
		withBook:   sbq.withBook.Clone(),
		// clone intermediate query.
		sql:  sbq.sql.Clone(),
		path: sbq.path,
	}
}

// WithSeries tells the query-builder to eager-load the nodes that are connected to
// the "series" edge. The optional arguments are used to configure the query builder of the edge.
func (sbq *SeriesBookQuery) WithSeries(opts ...func(*SeriesQuery)) *SeriesBookQuery {
	query := (&SeriesClient{config: sbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sbq.withSeries = query
	return sbq
}

// WithBook tells the query-builder to eager-load the nodes that are connected to
// the "book" edge. The optional arguments are used to configure the query builder of the edge.
func (sbq *SeriesBookQuery) WithBook(opts ...func(*BookQuery)) *SeriesBookQuery {
	query := (&BookClient{config: sbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sbq.withBook = query
	return sbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SeriesIndex float64 `json:"series_index,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SeriesBook.Query().
//		GroupBy(seriesbook.FieldSeriesIndex).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sbq *SeriesBookQuery) GroupBy(field string, fields ...string) *SeriesBookGroupBy {
	sbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SeriesBookGroupBy{build: sbq}
	grbuild.flds = &sbq.ctx.Fields
	grbuild.label = seriesbook.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SeriesIndex float64 `json:"series_index,omitempty"`
//	}
//
//	client.SeriesBook.Query().
//		Select(seriesbook.FieldSeriesIndex).
//		Scan(ctx, &v)
func (sbq *SeriesBookQuery) Select(fields ...string) *SeriesBookSelect {
	sbq.ctx.Fields = append(sbq.ctx.Fields, fields...)
	sbuild := &SeriesBookSelect{SeriesBookQuery: sbq}
	sbuild.label = seriesbook.Label
	sbuild.flds, sbuild.scan = &sbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SeriesBookSelect configured with the given aggregations.
func (sbq *SeriesBookQuery) Aggregate(fns ...AggregateFunc) *SeriesBookSelect {
	return sbq.Select().Aggregate(fns...)
}

func (sbq *SeriesBookQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sbq); err != nil {
				return err
			}
		}
	}
	for _, f := range sbq.ctx.Fields {
		if !seriesbook.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sbq.path != nil {
		prev, err := sbq.path(ctx)
		if err != nil {
			return err
		}
		sbq.sql = prev
	}
	if seriesbook.Policy == nil {
		return errors.New("ent: uninitialized seriesbook.Policy (forgotten import ent/runtime?)")
	}
	if err := seriesbook.Policy.EvalQuery(ctx, sbq); err != nil {
		return err
	}
	return nil
}

func (sbq *SeriesBookQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SeriesBook, error) {
	var (
		nodes       = []*SeriesBook{}
		_spec       = sbq.querySpec()
		loadedTypes = [2]bool{
			sbq.withSeries != nil,
			sbq.withBook != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SeriesBook).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SeriesBook{config: sbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sbq.modifiers) > 0 {
		_spec.Modifiers = sbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sbq.withSeries; query != nil {
		if err := sbq.loadSeries(ctx, query, nodes, nil,
			func(n *SeriesBook, e *Series) { n.Edges.Series = e }); err != nil {
			return nil, err
		}
	}
	if query := sbq.withBook; query != nil {
		if err := sbq.loadBook(ctx, query, nodes, nil,
			func(n *SeriesBook, e *Book) { n.Edges.Book = e }); err != nil {
			return nil, err
		}
	}
	for i := range sbq.loadTotal {
		if err := sbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sbq *SeriesBookQuery) loadSeries(ctx context.Context, query *SeriesQuery, nodes []*SeriesBook, init func(*SeriesBook), assign func(*SeriesBook, *Series)) error {
	ids := make([]ksuid.ID, 0, len(nodes))
	nodeids := make(map[ksuid.ID][]*SeriesBook)
	for i := range nodes {
		fk := nodes[i].SeriesID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(series.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "series_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sbq *SeriesBookQuery) loadBook(ctx context.Context, query *BookQuery, nodes []*SeriesBook, init func(*SeriesBook), assign func(*SeriesBook, *Book)) error {
	ids := make([]ksuid.ID, 0, len(nodes))
	nodeids := make(map[ksuid.ID][]*SeriesBook)
	for i := range nodes {
		fk := nodes[i].BookID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(book.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "book_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sbq *SeriesBookQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sbq.querySpec()
	if len(sbq.modifiers) > 0 {
		_spec.Modifiers = sbq.modifiers
	}
	_spec.Node.Columns = sbq.ctx.Fields
	if len(sbq.ctx.Fields) > 0 {
		_spec.Unique = sbq.ctx.Unique != nil && *sbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sbq.driver, _spec)
}

func (sbq *SeriesBookQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(seriesbook.Table, seriesbook.Columns, sqlgraph.NewFieldSpec(seriesbook.FieldID, field.TypeString))
	_spec.From = sbq.sql
	if unique := sbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sbq.path != nil {
		_spec.Unique = true
	}
	if fields := sbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seriesbook.FieldID)
		for i := range fields {
			if fields[i] != seriesbook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sbq.withSeries != nil {
			_spec.Node.AddColumnOnce(seriesbook.FieldSeriesID)
		}
		if sbq.withBook != nil {
			_spec.Node.AddColumnOnce(seriesbook.FieldBookID)
		}
	}
	if ps := sbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sbq *SeriesBookQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sbq.driver.Dialect())
	t1 := builder.Table(seriesbook.Table)
	columns := sbq.ctx.Fields
	if len(columns) == 0 {
		columns = seriesbook.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sbq.sql != nil {
		selector = sbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sbq.ctx.Unique != nil && *sbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sbq.predicates {
		p(selector)
	}
	for _, p := range sbq.order {
		p(selector)
	}
	if offset := sbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SeriesBookGroupBy is the group-by builder for SeriesBook entities.
type SeriesBookGroupBy struct {
	selector
	build *SeriesBookQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sbgb *SeriesBookGroupBy) Aggregate(fns ...AggregateFunc) *SeriesBookGroupBy {
	sbgb.fns = append(sbgb.fns, fns...)
	return sbgb
}

// Scan applies the selector query and scans the result into the given value.
func (sbgb *SeriesBookGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sbgb.build.ctx, "GroupBy")
	if err := sbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SeriesBookQuery, *SeriesBookGroupBy](ctx, sbgb.build, sbgb, sbgb.build.inters, v)
}

func (sbgb *SeriesBookGroupBy) sqlScan(ctx context.Context, root *SeriesBookQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sbgb.fns))
	for _, fn := range sbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sbgb.flds)+len(sbgb.fns))
		for _, f := range *sbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SeriesBookSelect is the builder for selecting fields of SeriesBook entities.
type SeriesBookSelect struct {
	*SeriesBookQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sbs *SeriesBookSelect) Aggregate(fns ...AggregateFunc) *SeriesBookSelect {
	sbs.fns = append(sbs.fns, fns...)
	return sbs
}

// Scan applies the selector query and scans the result into the given value.
func (sbs *SeriesBookSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sbs.ctx, "Select")
	if err := sbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SeriesBookQuery, *SeriesBookSelect](ctx, sbs.SeriesBookQuery, sbs, sbs.inters, v)
}

func (sbs *SeriesBookSelect) sqlScan(ctx context.Context, root *SeriesBookQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sbs.fns))
	for _, fn := range sbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
