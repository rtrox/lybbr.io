// Code generated by ent, DO NOT EDIT.

package ent

import (
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/identifier"
	"lybbrio/internal/ent/language"
	"lybbrio/internal/ent/publisher"
	"lybbrio/internal/ent/schema"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/series"
	"lybbrio/internal/ent/seriesbook"
	"lybbrio/internal/ent/shelf"
	"lybbrio/internal/ent/tag"
	"lybbrio/internal/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authorMixin := schema.Author{}.Mixin()
	authorMixinFields0 := authorMixin[0].Fields()
	_ = authorMixinFields0
	authorFields := schema.Author{}.Fields()
	_ = authorFields
	// authorDescName is the schema descriptor for name field.
	authorDescName := authorFields[0].Descriptor()
	// author.NameValidator is a validator for the "name" field. It is called by the builders before save.
	author.NameValidator = authorDescName.Validators[0].(func(string) error)
	// authorDescID is the schema descriptor for id field.
	authorDescID := authorMixinFields0[0].Descriptor()
	// author.DefaultID holds the default value on creation for the id field.
	author.DefaultID = authorDescID.Default.(func() ksuid.ID)
	bookMixin := schema.Book{}.Mixin()
	bookMixinFields0 := bookMixin[0].Fields()
	_ = bookMixinFields0
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescTitle is the schema descriptor for title field.
	bookDescTitle := bookFields[0].Descriptor()
	// book.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	book.TitleValidator = bookDescTitle.Validators[0].(func(string) error)
	// bookDescAddedAt is the schema descriptor for added_at field.
	bookDescAddedAt := bookFields[2].Descriptor()
	// book.DefaultAddedAt holds the default value on creation for the added_at field.
	book.DefaultAddedAt = bookDescAddedAt.Default.(func() time.Time)
	// bookDescPath is the schema descriptor for path field.
	bookDescPath := bookFields[4].Descriptor()
	// book.PathValidator is a validator for the "path" field. It is called by the builders before save.
	book.PathValidator = bookDescPath.Validators[0].(func(string) error)
	// bookDescID is the schema descriptor for id field.
	bookDescID := bookMixinFields0[0].Descriptor()
	// book.DefaultID holds the default value on creation for the id field.
	book.DefaultID = bookDescID.Default.(func() ksuid.ID)
	identifierMixin := schema.Identifier{}.Mixin()
	identifierMixinFields0 := identifierMixin[0].Fields()
	_ = identifierMixinFields0
	identifierFields := schema.Identifier{}.Fields()
	_ = identifierFields
	// identifierDescValue is the schema descriptor for value field.
	identifierDescValue := identifierFields[1].Descriptor()
	// identifier.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	identifier.ValueValidator = identifierDescValue.Validators[0].(func(string) error)
	// identifierDescID is the schema descriptor for id field.
	identifierDescID := identifierMixinFields0[0].Descriptor()
	// identifier.DefaultID holds the default value on creation for the id field.
	identifier.DefaultID = identifierDescID.Default.(func() ksuid.ID)
	languageMixin := schema.Language{}.Mixin()
	languageMixinFields0 := languageMixin[0].Fields()
	_ = languageMixinFields0
	languageFields := schema.Language{}.Fields()
	_ = languageFields
	// languageDescName is the schema descriptor for name field.
	languageDescName := languageFields[0].Descriptor()
	// language.NameValidator is a validator for the "name" field. It is called by the builders before save.
	language.NameValidator = languageDescName.Validators[0].(func(string) error)
	// languageDescCode is the schema descriptor for code field.
	languageDescCode := languageFields[1].Descriptor()
	// language.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	language.CodeValidator = languageDescCode.Validators[0].(func(string) error)
	// languageDescID is the schema descriptor for id field.
	languageDescID := languageMixinFields0[0].Descriptor()
	// language.DefaultID holds the default value on creation for the id field.
	language.DefaultID = languageDescID.Default.(func() ksuid.ID)
	publisherMixin := schema.Publisher{}.Mixin()
	publisherMixinFields0 := publisherMixin[0].Fields()
	_ = publisherMixinFields0
	publisherFields := schema.Publisher{}.Fields()
	_ = publisherFields
	// publisherDescName is the schema descriptor for name field.
	publisherDescName := publisherFields[0].Descriptor()
	// publisher.NameValidator is a validator for the "name" field. It is called by the builders before save.
	publisher.NameValidator = publisherDescName.Validators[0].(func(string) error)
	// publisherDescID is the schema descriptor for id field.
	publisherDescID := publisherMixinFields0[0].Descriptor()
	// publisher.DefaultID holds the default value on creation for the id field.
	publisher.DefaultID = publisherDescID.Default.(func() ksuid.ID)
	seriesMixin := schema.Series{}.Mixin()
	seriesMixinFields0 := seriesMixin[0].Fields()
	_ = seriesMixinFields0
	seriesFields := schema.Series{}.Fields()
	_ = seriesFields
	// seriesDescName is the schema descriptor for name field.
	seriesDescName := seriesFields[0].Descriptor()
	// series.NameValidator is a validator for the "name" field. It is called by the builders before save.
	series.NameValidator = seriesDescName.Validators[0].(func(string) error)
	// seriesDescSort is the schema descriptor for sort field.
	seriesDescSort := seriesFields[1].Descriptor()
	// series.SortValidator is a validator for the "sort" field. It is called by the builders before save.
	series.SortValidator = seriesDescSort.Validators[0].(func(string) error)
	// seriesDescID is the schema descriptor for id field.
	seriesDescID := seriesMixinFields0[0].Descriptor()
	// series.DefaultID holds the default value on creation for the id field.
	series.DefaultID = seriesDescID.Default.(func() ksuid.ID)
	seriesbookMixin := schema.SeriesBook{}.Mixin()
	seriesbookMixinFields0 := seriesbookMixin[0].Fields()
	_ = seriesbookMixinFields0
	seriesbookFields := schema.SeriesBook{}.Fields()
	_ = seriesbookFields
	// seriesbookDescSeriesIndex is the schema descriptor for series_index field.
	seriesbookDescSeriesIndex := seriesbookFields[0].Descriptor()
	// seriesbook.SeriesIndexValidator is a validator for the "series_index" field. It is called by the builders before save.
	seriesbook.SeriesIndexValidator = seriesbookDescSeriesIndex.Validators[0].(func(float64) error)
	// seriesbookDescSeriesID is the schema descriptor for series_id field.
	seriesbookDescSeriesID := seriesbookFields[1].Descriptor()
	// seriesbook.SeriesIDValidator is a validator for the "series_id" field. It is called by the builders before save.
	seriesbook.SeriesIDValidator = seriesbookDescSeriesID.Validators[0].(func(string) error)
	// seriesbookDescBookID is the schema descriptor for book_id field.
	seriesbookDescBookID := seriesbookFields[2].Descriptor()
	// seriesbook.BookIDValidator is a validator for the "book_id" field. It is called by the builders before save.
	seriesbook.BookIDValidator = seriesbookDescBookID.Validators[0].(func(string) error)
	// seriesbookDescID is the schema descriptor for id field.
	seriesbookDescID := seriesbookMixinFields0[0].Descriptor()
	// seriesbook.DefaultID holds the default value on creation for the id field.
	seriesbook.DefaultID = seriesbookDescID.Default.(func() ksuid.ID)
	shelfMixin := schema.Shelf{}.Mixin()
	shelfMixinFields0 := shelfMixin[0].Fields()
	_ = shelfMixinFields0
	shelfFields := schema.Shelf{}.Fields()
	_ = shelfFields
	// shelfDescName is the schema descriptor for name field.
	shelfDescName := shelfFields[0].Descriptor()
	// shelf.NameValidator is a validator for the "name" field. It is called by the builders before save.
	shelf.NameValidator = shelfDescName.Validators[0].(func(string) error)
	// shelfDescPublic is the schema descriptor for public field.
	shelfDescPublic := shelfFields[2].Descriptor()
	// shelf.DefaultPublic holds the default value on creation for the public field.
	shelf.DefaultPublic = shelfDescPublic.Default.(bool)
	// shelfDescID is the schema descriptor for id field.
	shelfDescID := shelfMixinFields0[0].Descriptor()
	// shelf.DefaultID holds the default value on creation for the id field.
	shelf.DefaultID = shelfDescID.Default.(func() ksuid.ID)
	tagMixin := schema.Tag{}.Mixin()
	tagMixinFields0 := tagMixin[0].Fields()
	_ = tagMixinFields0
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = tagDescName.Validators[0].(func(string) error)
	// tagDescID is the schema descriptor for id field.
	tagDescID := tagMixinFields0[0].Descriptor()
	// tag.DefaultID holds the default value on creation for the id field.
	tag.DefaultID = tagDescID.Default.(func() ksuid.ID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for passwordHash field.
	userDescPasswordHash := userFields[1].Descriptor()
	// user.PasswordHashValidator is a validator for the "passwordHash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() ksuid.ID)
}
