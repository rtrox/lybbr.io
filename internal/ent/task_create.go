// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/schema/task_enums"
	"lybbrio/internal/ent/task"
	"lybbrio/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tc *TaskCreate) SetCreateTime(t time.Time) *TaskCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TaskCreate) SetUpdateTime(t time.Time) *TaskCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(tet task_enums.TaskType) *TaskCreate {
	tc.mutation.SetType(tet)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableType(tet *task_enums.TaskType) *TaskCreate {
	if tet != nil {
		tc.SetType(*tet)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(te task_enums.Status) *TaskCreate {
	tc.mutation.SetStatus(te)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(te *task_enums.Status) *TaskCreate {
	if te != nil {
		tc.SetStatus(*te)
	}
	return tc
}

// SetProgress sets the "progress" field.
func (tc *TaskCreate) SetProgress(f float64) *TaskCreate {
	tc.mutation.SetProgress(f)
	return tc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tc *TaskCreate) SetNillableProgress(f *float64) *TaskCreate {
	if f != nil {
		tc.SetProgress(*f)
	}
	return tc
}

// SetMessage sets the "message" field.
func (tc *TaskCreate) SetMessage(s string) *TaskCreate {
	tc.mutation.SetMessage(s)
	return tc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMessage(s *string) *TaskCreate {
	if s != nil {
		tc.SetMessage(*s)
	}
	return tc
}

// SetError sets the "error" field.
func (tc *TaskCreate) SetError(s string) *TaskCreate {
	tc.mutation.SetError(s)
	return tc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tc *TaskCreate) SetNillableError(s *string) *TaskCreate {
	if s != nil {
		tc.SetError(*s)
	}
	return tc
}

// SetCreatedBy sets the "createdBy" field.
func (tc *TaskCreate) SetCreatedBy(k ksuid.ID) *TaskCreate {
	tc.mutation.SetCreatedBy(k)
	return tc
}

// SetNillableCreatedBy sets the "createdBy" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedBy(k *ksuid.ID) *TaskCreate {
	if k != nil {
		tc.SetCreatedBy(*k)
	}
	return tc
}

// SetIsSystemTask sets the "isSystemTask" field.
func (tc *TaskCreate) SetIsSystemTask(b bool) *TaskCreate {
	tc.mutation.SetIsSystemTask(b)
	return tc
}

// SetNillableIsSystemTask sets the "isSystemTask" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsSystemTask(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsSystemTask(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(k ksuid.ID) *TaskCreate {
	tc.mutation.SetID(k)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableID(k *ksuid.ID) *TaskCreate {
	if k != nil {
		tc.SetID(*k)
	}
	return tc
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tc *TaskCreate) SetCreatorID(id ksuid.ID) *TaskCreate {
	tc.mutation.SetCreatorID(id)
	return tc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatorID(id *ksuid.ID) *TaskCreate {
	if id != nil {
		tc = tc.SetCreatorID(*id)
	}
	return tc
}

// SetCreator sets the "creator" edge to the User entity.
func (tc *TaskCreate) SetCreator(u *User) *TaskCreate {
	return tc.SetCreatorID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		if task.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := task.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		if task.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := task.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
	if _, ok := tc.mutation.GetType(); !ok {
		v := task.DefaultType
		tc.mutation.SetType(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Progress(); !ok {
		v := task.DefaultProgress
		tc.mutation.SetProgress(v)
	}
	if _, ok := tc.mutation.IsSystemTask(); !ok {
		v := task.DefaultIsSystemTask
		tc.mutation.SetIsSystemTask(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if task.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultID (forgotten import ent/runtime?)")
		}
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Task.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Task.update_time"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Task.progress"`)}
	}
	if _, ok := tc.mutation.IsSystemTask(); !ok {
		return &ValidationError{Name: "isSystemTask", err: errors.New(`ent: missing required field "Task.isSystemTask"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Task.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(task.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Progress(); ok {
		_spec.SetField(task.FieldProgress, field.TypeFloat64, value)
		_node.Progress = value
	}
	if value, ok := tc.mutation.Message(); ok {
		_spec.SetField(task.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := tc.mutation.Error(); ok {
		_spec.SetField(task.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := tc.mutation.IsSystemTask(); ok {
		_spec.SetField(task.FieldIsSystemTask, field.TypeBool, value)
		_node.IsSystemTask = value
	}
	if nodes := tc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
