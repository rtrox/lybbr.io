// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/schema/task_enums"
	"lybbrio/internal/ent/task"
	"lybbrio/internal/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tc *TaskCreate) SetCreateTime(t time.Time) *TaskCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TaskCreate) SetUpdateTime(t time.Time) *TaskCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(tet task_enums.TaskType) *TaskCreate {
	tc.mutation.SetType(tet)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableType(tet *task_enums.TaskType) *TaskCreate {
	if tet != nil {
		tc.SetType(*tet)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(te task_enums.Status) *TaskCreate {
	tc.mutation.SetStatus(te)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(te *task_enums.Status) *TaskCreate {
	if te != nil {
		tc.SetStatus(*te)
	}
	return tc
}

// SetProgress sets the "progress" field.
func (tc *TaskCreate) SetProgress(f float64) *TaskCreate {
	tc.mutation.SetProgress(f)
	return tc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tc *TaskCreate) SetNillableProgress(f *float64) *TaskCreate {
	if f != nil {
		tc.SetProgress(*f)
	}
	return tc
}

// SetMessage sets the "message" field.
func (tc *TaskCreate) SetMessage(s string) *TaskCreate {
	tc.mutation.SetMessage(s)
	return tc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMessage(s *string) *TaskCreate {
	if s != nil {
		tc.SetMessage(*s)
	}
	return tc
}

// SetError sets the "error" field.
func (tc *TaskCreate) SetError(s string) *TaskCreate {
	tc.mutation.SetError(s)
	return tc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tc *TaskCreate) SetNillableError(s *string) *TaskCreate {
	if s != nil {
		tc.SetError(*s)
	}
	return tc
}

// SetCreatedBy sets the "createdBy" field.
func (tc *TaskCreate) SetCreatedBy(k ksuid.ID) *TaskCreate {
	tc.mutation.SetCreatedBy(k)
	return tc
}

// SetNillableCreatedBy sets the "createdBy" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedBy(k *ksuid.ID) *TaskCreate {
	if k != nil {
		tc.SetCreatedBy(*k)
	}
	return tc
}

// SetIsSystemTask sets the "isSystemTask" field.
func (tc *TaskCreate) SetIsSystemTask(b bool) *TaskCreate {
	tc.mutation.SetIsSystemTask(b)
	return tc
}

// SetNillableIsSystemTask sets the "isSystemTask" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsSystemTask(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsSystemTask(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(k ksuid.ID) *TaskCreate {
	tc.mutation.SetID(k)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableID(k *ksuid.ID) *TaskCreate {
	if k != nil {
		tc.SetID(*k)
	}
	return tc
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (tc *TaskCreate) SetCreatorID(id ksuid.ID) *TaskCreate {
	tc.mutation.SetCreatorID(id)
	return tc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatorID(id *ksuid.ID) *TaskCreate {
	if id != nil {
		tc = tc.SetCreatorID(*id)
	}
	return tc
}

// SetCreator sets the "creator" edge to the User entity.
func (tc *TaskCreate) SetCreator(u *User) *TaskCreate {
	return tc.SetCreatorID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		if task.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := task.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		if task.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := task.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
	if _, ok := tc.mutation.GetType(); !ok {
		v := task.DefaultType
		tc.mutation.SetType(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Progress(); !ok {
		v := task.DefaultProgress
		tc.mutation.SetProgress(v)
	}
	if _, ok := tc.mutation.IsSystemTask(); !ok {
		v := task.DefaultIsSystemTask
		tc.mutation.SetIsSystemTask(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if task.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized task.DefaultID (forgotten import ent/runtime?)")
		}
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Task.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Task.update_time"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Task.progress"`)}
	}
	if _, ok := tc.mutation.IsSystemTask(); !ok {
		return &ValidationError{Name: "isSystemTask", err: errors.New(`ent: missing required field "Task.isSystemTask"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Task.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(task.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Progress(); ok {
		_spec.SetField(task.FieldProgress, field.TypeFloat64, value)
		_node.Progress = value
	}
	if value, ok := tc.mutation.Message(); ok {
		_spec.SetField(task.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := tc.mutation.Error(); ok {
		_spec.SetField(task.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := tc.mutation.IsSystemTask(); ok {
		_spec.SetField(task.FieldIsSystemTask, field.TypeBool, value)
		_node.IsSystemTask = value
	}
	if nodes := tc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TaskUpsert) SetUpdateTime(v time.Time) *TaskUpsert {
	u.Set(task.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdateTime() *TaskUpsert {
	u.SetExcluded(task.FieldUpdateTime)
	return u
}

// SetType sets the "type" field.
func (u *TaskUpsert) SetType(v task_enums.TaskType) *TaskUpsert {
	u.Set(task.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateType() *TaskUpsert {
	u.SetExcluded(task.FieldType)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v task_enums.Status) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// SetProgress sets the "progress" field.
func (u *TaskUpsert) SetProgress(v float64) *TaskUpsert {
	u.Set(task.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *TaskUpsert) UpdateProgress() *TaskUpsert {
	u.SetExcluded(task.FieldProgress)
	return u
}

// AddProgress adds v to the "progress" field.
func (u *TaskUpsert) AddProgress(v float64) *TaskUpsert {
	u.Add(task.FieldProgress, v)
	return u
}

// SetMessage sets the "message" field.
func (u *TaskUpsert) SetMessage(v string) *TaskUpsert {
	u.Set(task.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMessage() *TaskUpsert {
	u.SetExcluded(task.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *TaskUpsert) ClearMessage() *TaskUpsert {
	u.SetNull(task.FieldMessage)
	return u
}

// SetError sets the "error" field.
func (u *TaskUpsert) SetError(v string) *TaskUpsert {
	u.Set(task.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *TaskUpsert) UpdateError() *TaskUpsert {
	u.SetExcluded(task.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *TaskUpsert) ClearError() *TaskUpsert {
	u.SetNull(task.FieldError)
	return u
}

// SetIsSystemTask sets the "isSystemTask" field.
func (u *TaskUpsert) SetIsSystemTask(v bool) *TaskUpsert {
	u.Set(task.FieldIsSystemTask, v)
	return u
}

// UpdateIsSystemTask sets the "isSystemTask" field to the value that was provided on create.
func (u *TaskUpsert) UpdateIsSystemTask() *TaskUpsert {
	u.SetExcluded(task.FieldIsSystemTask)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(task.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(task.FieldCreateTime)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(task.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TaskUpsertOne) SetUpdateTime(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdateTime() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertOne) SetType(v task_enums.TaskType) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v task_enums.Status) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetProgress sets the "progress" field.
func (u *TaskUpsertOne) SetProgress(v float64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *TaskUpsertOne) AddProgress(v float64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateProgress() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProgress()
	})
}

// SetMessage sets the "message" field.
func (u *TaskUpsertOne) SetMessage(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMessage() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *TaskUpsertOne) ClearMessage() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMessage()
	})
}

// SetError sets the "error" field.
func (u *TaskUpsertOne) SetError(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateError() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *TaskUpsertOne) ClearError() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearError()
	})
}

// SetIsSystemTask sets the "isSystemTask" field.
func (u *TaskUpsertOne) SetIsSystemTask(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetIsSystemTask(v)
	})
}

// UpdateIsSystemTask sets the "isSystemTask" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateIsSystemTask() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateIsSystemTask()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id ksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TaskUpsertOne.ID is not supported by MySQL driver. Use TaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) ksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(task.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(task.FieldCreateTime)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(task.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TaskUpsertBulk) SetUpdateTime(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdateTime() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertBulk) SetType(v task_enums.TaskType) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v task_enums.Status) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetProgress sets the "progress" field.
func (u *TaskUpsertBulk) SetProgress(v float64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *TaskUpsertBulk) AddProgress(v float64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateProgress() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProgress()
	})
}

// SetMessage sets the "message" field.
func (u *TaskUpsertBulk) SetMessage(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMessage() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *TaskUpsertBulk) ClearMessage() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMessage()
	})
}

// SetError sets the "error" field.
func (u *TaskUpsertBulk) SetError(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateError() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *TaskUpsertBulk) ClearError() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearError()
	})
}

// SetIsSystemTask sets the "isSystemTask" field.
func (u *TaskUpsertBulk) SetIsSystemTask(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetIsSystemTask(v)
	})
}

// UpdateIsSystemTask sets the "isSystemTask" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateIsSystemTask() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateIsSystemTask()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
