// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/schema/ksuid"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[ksuid.ID]
	PageInfo       = entgql.PageInfo[ksuid.ID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AuthorEdge is the edge representation of Author.
type AuthorEdge struct {
	Node   *Author `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// AuthorConnection is the connection containing edges to Author.
type AuthorConnection struct {
	Edges      []*AuthorEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *AuthorConnection) build(nodes []*Author, pager *authorPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Author
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Author {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Author {
			return nodes[i]
		}
	}
	c.Edges = make([]*AuthorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AuthorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AuthorPaginateOption enables pagination customization.
type AuthorPaginateOption func(*authorPager) error

// WithAuthorOrder configures pagination ordering.
func WithAuthorOrder(order []*AuthorOrder) AuthorPaginateOption {
	return func(pager *authorPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithAuthorFilter configures pagination filter.
func WithAuthorFilter(filter func(*AuthorQuery) (*AuthorQuery, error)) AuthorPaginateOption {
	return func(pager *authorPager) error {
		if filter == nil {
			return errors.New("AuthorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type authorPager struct {
	reverse bool
	order   []*AuthorOrder
	filter  func(*AuthorQuery) (*AuthorQuery, error)
}

func newAuthorPager(opts []AuthorPaginateOption, reverse bool) (*authorPager, error) {
	pager := &authorPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *authorPager) applyFilter(query *AuthorQuery) (*AuthorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *authorPager) toCursor(a *Author) Cursor {
	cs := make([]any, 0, len(p.order))
	for _, o := range p.order {
		cs = append(cs, o.Field.toCursor(a).Value)
	}
	return Cursor{ID: a.ID, Value: cs}
}

func (p *authorPager) applyCursors(query *AuthorQuery, after, before *Cursor) (*AuthorQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultAuthorOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *authorPager) applyOrder(query *AuthorQuery) *AuthorQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultAuthorOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultAuthorOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *authorPager) orderExpr(query *AuthorQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultAuthorOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Author.
func (a *AuthorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuthorPaginateOption,
) (*AuthorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuthorPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AuthorConnection{Edges: []*AuthorEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AuthorOrderFieldName orders Author by name.
	AuthorOrderFieldName = &AuthorOrderField{
		Value: func(a *Author) (ent.Value, error) {
			return a.Name, nil
		},
		column: author.FieldName,
		toTerm: author.ByName,
		toCursor: func(a *Author) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Name,
			}
		},
	}
	// AuthorOrderFieldSort orders Author by sort.
	AuthorOrderFieldSort = &AuthorOrderField{
		Value: func(a *Author) (ent.Value, error) {
			return a.Sort, nil
		},
		column: author.FieldSort,
		toTerm: author.BySort,
		toCursor: func(a *Author) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Sort,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AuthorOrderField) String() string {
	var str string
	switch f.column {
	case AuthorOrderFieldName.column:
		str = "NAME"
	case AuthorOrderFieldSort.column:
		str = "SORT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AuthorOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AuthorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AuthorOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *AuthorOrderFieldName
	case "SORT":
		*f = *AuthorOrderFieldSort
	default:
		return fmt.Errorf("%s is not a valid AuthorOrderField", str)
	}
	return nil
}

// AuthorOrderField defines the ordering field of Author.
type AuthorOrderField struct {
	// Value extracts the ordering value from the given Author.
	Value    func(*Author) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) author.OrderOption
	toCursor func(*Author) Cursor
}

// AuthorOrder defines the ordering of Author.
type AuthorOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *AuthorOrderField `json:"field"`
}

// DefaultAuthorOrder is the default ordering of Author.
var DefaultAuthorOrder = &AuthorOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AuthorOrderField{
		Value: func(a *Author) (ent.Value, error) {
			return a.ID, nil
		},
		column: author.FieldID,
		toTerm: author.ByID,
		toCursor: func(a *Author) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Author into AuthorEdge.
func (a *Author) ToEdge(order *AuthorOrder) *AuthorEdge {
	if order == nil {
		order = DefaultAuthorOrder
	}
	return &AuthorEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// BookEdge is the edge representation of Book.
type BookEdge struct {
	Node   *Book  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// BookConnection is the connection containing edges to Book.
type BookConnection struct {
	Edges      []*BookEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *BookConnection) build(nodes []*Book, pager *bookPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Book
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Book {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Book {
			return nodes[i]
		}
	}
	c.Edges = make([]*BookEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BookEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BookPaginateOption enables pagination customization.
type BookPaginateOption func(*bookPager) error

// WithBookOrder configures pagination ordering.
func WithBookOrder(order []*BookOrder) BookPaginateOption {
	return func(pager *bookPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithBookFilter configures pagination filter.
func WithBookFilter(filter func(*BookQuery) (*BookQuery, error)) BookPaginateOption {
	return func(pager *bookPager) error {
		if filter == nil {
			return errors.New("BookQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bookPager struct {
	reverse bool
	order   []*BookOrder
	filter  func(*BookQuery) (*BookQuery, error)
}

func newBookPager(opts []BookPaginateOption, reverse bool) (*bookPager, error) {
	pager := &bookPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *bookPager) applyFilter(query *BookQuery) (*BookQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bookPager) toCursor(b *Book) Cursor {
	cs := make([]any, 0, len(p.order))
	for _, o := range p.order {
		cs = append(cs, o.Field.toCursor(b).Value)
	}
	return Cursor{ID: b.ID, Value: cs}
}

func (p *bookPager) applyCursors(query *BookQuery, after, before *Cursor) (*BookQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultBookOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *bookPager) applyOrder(query *BookQuery) *BookQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultBookOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultBookOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *bookPager) orderExpr(query *BookQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultBookOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Book.
func (b *BookQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BookPaginateOption,
) (*BookConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBookPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BookConnection{Edges: []*BookEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = b.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// BookOrderFieldTitle orders Book by title.
	BookOrderFieldTitle = &BookOrderField{
		Value: func(b *Book) (ent.Value, error) {
			return b.Title, nil
		},
		column: book.FieldTitle,
		toTerm: book.ByTitle,
		toCursor: func(b *Book) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Title,
			}
		},
	}
	// BookOrderFieldSort orders Book by sort.
	BookOrderFieldSort = &BookOrderField{
		Value: func(b *Book) (ent.Value, error) {
			return b.Sort, nil
		},
		column: book.FieldSort,
		toTerm: book.BySort,
		toCursor: func(b *Book) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Sort,
			}
		},
	}
	// BookOrderFieldAddedAt orders Book by addedAt.
	BookOrderFieldAddedAt = &BookOrderField{
		Value: func(b *Book) (ent.Value, error) {
			return b.AddedAt, nil
		},
		column: book.FieldAddedAt,
		toTerm: book.ByAddedAt,
		toCursor: func(b *Book) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.AddedAt,
			}
		},
	}
	// BookOrderFieldPubDate orders Book by pubDate.
	BookOrderFieldPubDate = &BookOrderField{
		Value: func(b *Book) (ent.Value, error) {
			return b.PubDate, nil
		},
		column: book.FieldPubDate,
		toTerm: book.ByPubDate,
		toCursor: func(b *Book) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.PubDate,
			}
		},
	}
	// BookOrderFieldIsbn orders Book by isbn.
	BookOrderFieldIsbn = &BookOrderField{
		Value: func(b *Book) (ent.Value, error) {
			return b.Isbn, nil
		},
		column: book.FieldIsbn,
		toTerm: book.ByIsbn,
		toCursor: func(b *Book) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Isbn,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f BookOrderField) String() string {
	var str string
	switch f.column {
	case BookOrderFieldTitle.column:
		str = "TITLE"
	case BookOrderFieldSort.column:
		str = "SORT"
	case BookOrderFieldAddedAt.column:
		str = "ADDED_AT"
	case BookOrderFieldPubDate.column:
		str = "PUB_DATE"
	case BookOrderFieldIsbn.column:
		str = "ISBN"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f BookOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *BookOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("BookOrderField %T must be a string", v)
	}
	switch str {
	case "TITLE":
		*f = *BookOrderFieldTitle
	case "SORT":
		*f = *BookOrderFieldSort
	case "ADDED_AT":
		*f = *BookOrderFieldAddedAt
	case "PUB_DATE":
		*f = *BookOrderFieldPubDate
	case "ISBN":
		*f = *BookOrderFieldIsbn
	default:
		return fmt.Errorf("%s is not a valid BookOrderField", str)
	}
	return nil
}

// BookOrderField defines the ordering field of Book.
type BookOrderField struct {
	// Value extracts the ordering value from the given Book.
	Value    func(*Book) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) book.OrderOption
	toCursor func(*Book) Cursor
}

// BookOrder defines the ordering of Book.
type BookOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *BookOrderField `json:"field"`
}

// DefaultBookOrder is the default ordering of Book.
var DefaultBookOrder = &BookOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BookOrderField{
		Value: func(b *Book) (ent.Value, error) {
			return b.ID, nil
		},
		column: book.FieldID,
		toTerm: book.ByID,
		toCursor: func(b *Book) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Book into BookEdge.
func (b *Book) ToEdge(order *BookOrder) *BookEdge {
	if order == nil {
		order = DefaultBookOrder
	}
	return &BookEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}
