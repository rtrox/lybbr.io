// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/identifier"
	"lybbrio/internal/ent/language"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/publisher"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/series"
	"lybbrio/internal/ent/seriesbook"
	"lybbrio/internal/ent/shelf"
	"lybbrio/internal/ent/tag"
	"lybbrio/internal/ent/user"
	"lybbrio/internal/ent/userpermissions"
	"time"
)

// AuthorWhereInput represents a where input for filtering Author queries.
type AuthorWhereInput struct {
	Predicates []predicate.Author  `json:"-"`
	Not        *AuthorWhereInput   `json:"not,omitempty"`
	Or         []*AuthorWhereInput `json:"or,omitempty"`
	And        []*AuthorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "link" field predicates.
	Link             *string  `json:"link,omitempty"`
	LinkNEQ          *string  `json:"linkNEQ,omitempty"`
	LinkIn           []string `json:"linkIn,omitempty"`
	LinkNotIn        []string `json:"linkNotIn,omitempty"`
	LinkGT           *string  `json:"linkGT,omitempty"`
	LinkGTE          *string  `json:"linkGTE,omitempty"`
	LinkLT           *string  `json:"linkLT,omitempty"`
	LinkLTE          *string  `json:"linkLTE,omitempty"`
	LinkContains     *string  `json:"linkContains,omitempty"`
	LinkHasPrefix    *string  `json:"linkHasPrefix,omitempty"`
	LinkHasSuffix    *string  `json:"linkHasSuffix,omitempty"`
	LinkIsNil        bool     `json:"linkIsNil,omitempty"`
	LinkNotNil       bool     `json:"linkNotNil,omitempty"`
	LinkEqualFold    *string  `json:"linkEqualFold,omitempty"`
	LinkContainsFold *string  `json:"linkContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AuthorWhereInput) AddPredicates(predicates ...predicate.Author) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AuthorWhereInput filter on the AuthorQuery builder.
func (i *AuthorWhereInput) Filter(q *AuthorQuery) (*AuthorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAuthorWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAuthorWhereInput is returned in case the AuthorWhereInput is empty.
var ErrEmptyAuthorWhereInput = errors.New("ent: empty predicate AuthorWhereInput")

// P returns a predicate for filtering authors.
// An error is returned if the input is empty or invalid.
func (i *AuthorWhereInput) P() (predicate.Author, error) {
	var predicates []predicate.Author
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, author.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Author, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, author.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Author, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, author.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, author.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, author.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, author.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, author.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, author.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, author.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, author.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, author.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, author.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, author.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, author.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, author.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, author.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, author.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, author.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, author.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, author.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, author.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, author.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, author.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, author.NameContainsFold(*i.NameContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, author.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, author.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, author.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, author.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, author.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, author.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, author.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, author.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, author.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, author.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, author.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, author.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, author.SortContainsFold(*i.SortContainsFold))
	}
	if i.Link != nil {
		predicates = append(predicates, author.LinkEQ(*i.Link))
	}
	if i.LinkNEQ != nil {
		predicates = append(predicates, author.LinkNEQ(*i.LinkNEQ))
	}
	if len(i.LinkIn) > 0 {
		predicates = append(predicates, author.LinkIn(i.LinkIn...))
	}
	if len(i.LinkNotIn) > 0 {
		predicates = append(predicates, author.LinkNotIn(i.LinkNotIn...))
	}
	if i.LinkGT != nil {
		predicates = append(predicates, author.LinkGT(*i.LinkGT))
	}
	if i.LinkGTE != nil {
		predicates = append(predicates, author.LinkGTE(*i.LinkGTE))
	}
	if i.LinkLT != nil {
		predicates = append(predicates, author.LinkLT(*i.LinkLT))
	}
	if i.LinkLTE != nil {
		predicates = append(predicates, author.LinkLTE(*i.LinkLTE))
	}
	if i.LinkContains != nil {
		predicates = append(predicates, author.LinkContains(*i.LinkContains))
	}
	if i.LinkHasPrefix != nil {
		predicates = append(predicates, author.LinkHasPrefix(*i.LinkHasPrefix))
	}
	if i.LinkHasSuffix != nil {
		predicates = append(predicates, author.LinkHasSuffix(*i.LinkHasSuffix))
	}
	if i.LinkIsNil {
		predicates = append(predicates, author.LinkIsNil())
	}
	if i.LinkNotNil {
		predicates = append(predicates, author.LinkNotNil())
	}
	if i.LinkEqualFold != nil {
		predicates = append(predicates, author.LinkEqualFold(*i.LinkEqualFold))
	}
	if i.LinkContainsFold != nil {
		predicates = append(predicates, author.LinkContainsFold(*i.LinkContainsFold))
	}

	if i.HasBooks != nil {
		p := author.HasBooks()
		if !*i.HasBooks {
			p = author.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, author.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAuthorWhereInput
	case 1:
		return predicates[0], nil
	default:
		return author.And(predicates...), nil
	}
}

// BookWhereInput represents a where input for filtering Book queries.
type BookWhereInput struct {
	Predicates []predicate.Book  `json:"-"`
	Not        *BookWhereInput   `json:"not,omitempty"`
	Or         []*BookWhereInput `json:"or,omitempty"`
	And        []*BookWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "added_at" field predicates.
	AddedAt      *time.Time  `json:"addedAt,omitempty"`
	AddedAtNEQ   *time.Time  `json:"addedAtNEQ,omitempty"`
	AddedAtIn    []time.Time `json:"addedAtIn,omitempty"`
	AddedAtNotIn []time.Time `json:"addedAtNotIn,omitempty"`
	AddedAtGT    *time.Time  `json:"addedAtGT,omitempty"`
	AddedAtGTE   *time.Time  `json:"addedAtGTE,omitempty"`
	AddedAtLT    *time.Time  `json:"addedAtLT,omitempty"`
	AddedAtLTE   *time.Time  `json:"addedAtLTE,omitempty"`

	// "pub_date" field predicates.
	PubDate       *time.Time  `json:"pubDate,omitempty"`
	PubDateNEQ    *time.Time  `json:"pubDateNEQ,omitempty"`
	PubDateIn     []time.Time `json:"pubDateIn,omitempty"`
	PubDateNotIn  []time.Time `json:"pubDateNotIn,omitempty"`
	PubDateGT     *time.Time  `json:"pubDateGT,omitempty"`
	PubDateGTE    *time.Time  `json:"pubDateGTE,omitempty"`
	PubDateLT     *time.Time  `json:"pubDateLT,omitempty"`
	PubDateLTE    *time.Time  `json:"pubDateLTE,omitempty"`
	PubDateIsNil  bool        `json:"pubDateIsNil,omitempty"`
	PubDateNotNil bool        `json:"pubDateNotNil,omitempty"`

	// "path" field predicates.
	Path             *string  `json:"path,omitempty"`
	PathNEQ          *string  `json:"pathNEQ,omitempty"`
	PathIn           []string `json:"pathIn,omitempty"`
	PathNotIn        []string `json:"pathNotIn,omitempty"`
	PathGT           *string  `json:"pathGT,omitempty"`
	PathGTE          *string  `json:"pathGTE,omitempty"`
	PathLT           *string  `json:"pathLT,omitempty"`
	PathLTE          *string  `json:"pathLTE,omitempty"`
	PathContains     *string  `json:"pathContains,omitempty"`
	PathHasPrefix    *string  `json:"pathHasPrefix,omitempty"`
	PathHasSuffix    *string  `json:"pathHasSuffix,omitempty"`
	PathEqualFold    *string  `json:"pathEqualFold,omitempty"`
	PathContainsFold *string  `json:"pathContainsFold,omitempty"`

	// "isbn" field predicates.
	Isbn             *string  `json:"isbn,omitempty"`
	IsbnNEQ          *string  `json:"isbnNEQ,omitempty"`
	IsbnIn           []string `json:"isbnIn,omitempty"`
	IsbnNotIn        []string `json:"isbnNotIn,omitempty"`
	IsbnGT           *string  `json:"isbnGT,omitempty"`
	IsbnGTE          *string  `json:"isbnGTE,omitempty"`
	IsbnLT           *string  `json:"isbnLT,omitempty"`
	IsbnLTE          *string  `json:"isbnLTE,omitempty"`
	IsbnContains     *string  `json:"isbnContains,omitempty"`
	IsbnHasPrefix    *string  `json:"isbnHasPrefix,omitempty"`
	IsbnHasSuffix    *string  `json:"isbnHasSuffix,omitempty"`
	IsbnIsNil        bool     `json:"isbnIsNil,omitempty"`
	IsbnNotNil       bool     `json:"isbnNotNil,omitempty"`
	IsbnEqualFold    *string  `json:"isbnEqualFold,omitempty"`
	IsbnContainsFold *string  `json:"isbnContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "authors" edge predicates.
	HasAuthors     *bool               `json:"hasAuthors,omitempty"`
	HasAuthorsWith []*AuthorWhereInput `json:"hasAuthorsWith,omitempty"`

	// "series" edge predicates.
	HasSeries     *bool               `json:"hasSeries,omitempty"`
	HasSeriesWith []*SeriesWhereInput `json:"hasSeriesWith,omitempty"`

	// "identifier" edge predicates.
	HasIdentifier     *bool                   `json:"hasIdentifier,omitempty"`
	HasIdentifierWith []*IdentifierWhereInput `json:"hasIdentifierWith,omitempty"`

	// "language" edge predicates.
	HasLanguage     *bool                 `json:"hasLanguage,omitempty"`
	HasLanguageWith []*LanguageWhereInput `json:"hasLanguageWith,omitempty"`

	// "shelf" edge predicates.
	HasShelf     *bool              `json:"hasShelf,omitempty"`
	HasShelfWith []*ShelfWhereInput `json:"hasShelfWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BookWhereInput) AddPredicates(predicates ...predicate.Book) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BookWhereInput filter on the BookQuery builder.
func (i *BookWhereInput) Filter(q *BookQuery) (*BookQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBookWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBookWhereInput is returned in case the BookWhereInput is empty.
var ErrEmptyBookWhereInput = errors.New("ent: empty predicate BookWhereInput")

// P returns a predicate for filtering books.
// An error is returned if the input is empty or invalid.
func (i *BookWhereInput) P() (predicate.Book, error) {
	var predicates []predicate.Book
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, book.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Book, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, book.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Book, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, book.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, book.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, book.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, book.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, book.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, book.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, book.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, book.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, book.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, book.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, book.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, book.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, book.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, book.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, book.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, book.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, book.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, book.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, book.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, book.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, book.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, book.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, book.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, book.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, book.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, book.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, book.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, book.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, book.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, book.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, book.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, book.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, book.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, book.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, book.SortContainsFold(*i.SortContainsFold))
	}
	if i.AddedAt != nil {
		predicates = append(predicates, book.AddedAtEQ(*i.AddedAt))
	}
	if i.AddedAtNEQ != nil {
		predicates = append(predicates, book.AddedAtNEQ(*i.AddedAtNEQ))
	}
	if len(i.AddedAtIn) > 0 {
		predicates = append(predicates, book.AddedAtIn(i.AddedAtIn...))
	}
	if len(i.AddedAtNotIn) > 0 {
		predicates = append(predicates, book.AddedAtNotIn(i.AddedAtNotIn...))
	}
	if i.AddedAtGT != nil {
		predicates = append(predicates, book.AddedAtGT(*i.AddedAtGT))
	}
	if i.AddedAtGTE != nil {
		predicates = append(predicates, book.AddedAtGTE(*i.AddedAtGTE))
	}
	if i.AddedAtLT != nil {
		predicates = append(predicates, book.AddedAtLT(*i.AddedAtLT))
	}
	if i.AddedAtLTE != nil {
		predicates = append(predicates, book.AddedAtLTE(*i.AddedAtLTE))
	}
	if i.PubDate != nil {
		predicates = append(predicates, book.PubDateEQ(*i.PubDate))
	}
	if i.PubDateNEQ != nil {
		predicates = append(predicates, book.PubDateNEQ(*i.PubDateNEQ))
	}
	if len(i.PubDateIn) > 0 {
		predicates = append(predicates, book.PubDateIn(i.PubDateIn...))
	}
	if len(i.PubDateNotIn) > 0 {
		predicates = append(predicates, book.PubDateNotIn(i.PubDateNotIn...))
	}
	if i.PubDateGT != nil {
		predicates = append(predicates, book.PubDateGT(*i.PubDateGT))
	}
	if i.PubDateGTE != nil {
		predicates = append(predicates, book.PubDateGTE(*i.PubDateGTE))
	}
	if i.PubDateLT != nil {
		predicates = append(predicates, book.PubDateLT(*i.PubDateLT))
	}
	if i.PubDateLTE != nil {
		predicates = append(predicates, book.PubDateLTE(*i.PubDateLTE))
	}
	if i.PubDateIsNil {
		predicates = append(predicates, book.PubDateIsNil())
	}
	if i.PubDateNotNil {
		predicates = append(predicates, book.PubDateNotNil())
	}
	if i.Path != nil {
		predicates = append(predicates, book.PathEQ(*i.Path))
	}
	if i.PathNEQ != nil {
		predicates = append(predicates, book.PathNEQ(*i.PathNEQ))
	}
	if len(i.PathIn) > 0 {
		predicates = append(predicates, book.PathIn(i.PathIn...))
	}
	if len(i.PathNotIn) > 0 {
		predicates = append(predicates, book.PathNotIn(i.PathNotIn...))
	}
	if i.PathGT != nil {
		predicates = append(predicates, book.PathGT(*i.PathGT))
	}
	if i.PathGTE != nil {
		predicates = append(predicates, book.PathGTE(*i.PathGTE))
	}
	if i.PathLT != nil {
		predicates = append(predicates, book.PathLT(*i.PathLT))
	}
	if i.PathLTE != nil {
		predicates = append(predicates, book.PathLTE(*i.PathLTE))
	}
	if i.PathContains != nil {
		predicates = append(predicates, book.PathContains(*i.PathContains))
	}
	if i.PathHasPrefix != nil {
		predicates = append(predicates, book.PathHasPrefix(*i.PathHasPrefix))
	}
	if i.PathHasSuffix != nil {
		predicates = append(predicates, book.PathHasSuffix(*i.PathHasSuffix))
	}
	if i.PathEqualFold != nil {
		predicates = append(predicates, book.PathEqualFold(*i.PathEqualFold))
	}
	if i.PathContainsFold != nil {
		predicates = append(predicates, book.PathContainsFold(*i.PathContainsFold))
	}
	if i.Isbn != nil {
		predicates = append(predicates, book.IsbnEQ(*i.Isbn))
	}
	if i.IsbnNEQ != nil {
		predicates = append(predicates, book.IsbnNEQ(*i.IsbnNEQ))
	}
	if len(i.IsbnIn) > 0 {
		predicates = append(predicates, book.IsbnIn(i.IsbnIn...))
	}
	if len(i.IsbnNotIn) > 0 {
		predicates = append(predicates, book.IsbnNotIn(i.IsbnNotIn...))
	}
	if i.IsbnGT != nil {
		predicates = append(predicates, book.IsbnGT(*i.IsbnGT))
	}
	if i.IsbnGTE != nil {
		predicates = append(predicates, book.IsbnGTE(*i.IsbnGTE))
	}
	if i.IsbnLT != nil {
		predicates = append(predicates, book.IsbnLT(*i.IsbnLT))
	}
	if i.IsbnLTE != nil {
		predicates = append(predicates, book.IsbnLTE(*i.IsbnLTE))
	}
	if i.IsbnContains != nil {
		predicates = append(predicates, book.IsbnContains(*i.IsbnContains))
	}
	if i.IsbnHasPrefix != nil {
		predicates = append(predicates, book.IsbnHasPrefix(*i.IsbnHasPrefix))
	}
	if i.IsbnHasSuffix != nil {
		predicates = append(predicates, book.IsbnHasSuffix(*i.IsbnHasSuffix))
	}
	if i.IsbnIsNil {
		predicates = append(predicates, book.IsbnIsNil())
	}
	if i.IsbnNotNil {
		predicates = append(predicates, book.IsbnNotNil())
	}
	if i.IsbnEqualFold != nil {
		predicates = append(predicates, book.IsbnEqualFold(*i.IsbnEqualFold))
	}
	if i.IsbnContainsFold != nil {
		predicates = append(predicates, book.IsbnContainsFold(*i.IsbnContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, book.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, book.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, book.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, book.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, book.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, book.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, book.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, book.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, book.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, book.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, book.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, book.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, book.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, book.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, book.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasAuthors != nil {
		p := book.HasAuthors()
		if !*i.HasAuthors {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorsWith) > 0 {
		with := make([]predicate.Author, 0, len(i.HasAuthorsWith))
		for _, w := range i.HasAuthorsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthorsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasAuthorsWith(with...))
	}
	if i.HasSeries != nil {
		p := book.HasSeries()
		if !*i.HasSeries {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSeriesWith) > 0 {
		with := make([]predicate.Series, 0, len(i.HasSeriesWith))
		for _, w := range i.HasSeriesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSeriesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasSeriesWith(with...))
	}
	if i.HasIdentifier != nil {
		p := book.HasIdentifier()
		if !*i.HasIdentifier {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIdentifierWith) > 0 {
		with := make([]predicate.Identifier, 0, len(i.HasIdentifierWith))
		for _, w := range i.HasIdentifierWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIdentifierWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasIdentifierWith(with...))
	}
	if i.HasLanguage != nil {
		p := book.HasLanguage()
		if !*i.HasLanguage {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLanguageWith) > 0 {
		with := make([]predicate.Language, 0, len(i.HasLanguageWith))
		for _, w := range i.HasLanguageWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLanguageWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasLanguageWith(with...))
	}
	if i.HasShelf != nil {
		p := book.HasShelf()
		if !*i.HasShelf {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasShelfWith) > 0 {
		with := make([]predicate.Shelf, 0, len(i.HasShelfWith))
		for _, w := range i.HasShelfWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasShelfWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasShelfWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBookWhereInput
	case 1:
		return predicates[0], nil
	default:
		return book.And(predicates...), nil
	}
}

// IdentifierWhereInput represents a where input for filtering Identifier queries.
type IdentifierWhereInput struct {
	Predicates []predicate.Identifier  `json:"-"`
	Not        *IdentifierWhereInput   `json:"not,omitempty"`
	Or         []*IdentifierWhereInput `json:"or,omitempty"`
	And        []*IdentifierWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "type" field predicates.
	Type      *identifier.Type  `json:"type,omitempty"`
	TypeNEQ   *identifier.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []identifier.Type `json:"typeIn,omitempty"`
	TypeNotIn []identifier.Type `json:"typeNotIn,omitempty"`

	// "value" field predicates.
	Value             *string  `json:"value,omitempty"`
	ValueNEQ          *string  `json:"valueNEQ,omitempty"`
	ValueIn           []string `json:"valueIn,omitempty"`
	ValueNotIn        []string `json:"valueNotIn,omitempty"`
	ValueGT           *string  `json:"valueGT,omitempty"`
	ValueGTE          *string  `json:"valueGTE,omitempty"`
	ValueLT           *string  `json:"valueLT,omitempty"`
	ValueLTE          *string  `json:"valueLTE,omitempty"`
	ValueContains     *string  `json:"valueContains,omitempty"`
	ValueHasPrefix    *string  `json:"valueHasPrefix,omitempty"`
	ValueHasSuffix    *string  `json:"valueHasSuffix,omitempty"`
	ValueEqualFold    *string  `json:"valueEqualFold,omitempty"`
	ValueContainsFold *string  `json:"valueContainsFold,omitempty"`

	// "book" edge predicates.
	HasBook     *bool             `json:"hasBook,omitempty"`
	HasBookWith []*BookWhereInput `json:"hasBookWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *IdentifierWhereInput) AddPredicates(predicates ...predicate.Identifier) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the IdentifierWhereInput filter on the IdentifierQuery builder.
func (i *IdentifierWhereInput) Filter(q *IdentifierQuery) (*IdentifierQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyIdentifierWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyIdentifierWhereInput is returned in case the IdentifierWhereInput is empty.
var ErrEmptyIdentifierWhereInput = errors.New("ent: empty predicate IdentifierWhereInput")

// P returns a predicate for filtering identifiers.
// An error is returned if the input is empty or invalid.
func (i *IdentifierWhereInput) P() (predicate.Identifier, error) {
	var predicates []predicate.Identifier
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, identifier.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Identifier, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, identifier.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Identifier, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, identifier.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, identifier.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, identifier.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, identifier.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, identifier.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, identifier.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, identifier.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, identifier.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, identifier.IDLTE(*i.IDLTE))
	}
	if i.Type != nil {
		predicates = append(predicates, identifier.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, identifier.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, identifier.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, identifier.TypeNotIn(i.TypeNotIn...))
	}
	if i.Value != nil {
		predicates = append(predicates, identifier.ValueEQ(*i.Value))
	}
	if i.ValueNEQ != nil {
		predicates = append(predicates, identifier.ValueNEQ(*i.ValueNEQ))
	}
	if len(i.ValueIn) > 0 {
		predicates = append(predicates, identifier.ValueIn(i.ValueIn...))
	}
	if len(i.ValueNotIn) > 0 {
		predicates = append(predicates, identifier.ValueNotIn(i.ValueNotIn...))
	}
	if i.ValueGT != nil {
		predicates = append(predicates, identifier.ValueGT(*i.ValueGT))
	}
	if i.ValueGTE != nil {
		predicates = append(predicates, identifier.ValueGTE(*i.ValueGTE))
	}
	if i.ValueLT != nil {
		predicates = append(predicates, identifier.ValueLT(*i.ValueLT))
	}
	if i.ValueLTE != nil {
		predicates = append(predicates, identifier.ValueLTE(*i.ValueLTE))
	}
	if i.ValueContains != nil {
		predicates = append(predicates, identifier.ValueContains(*i.ValueContains))
	}
	if i.ValueHasPrefix != nil {
		predicates = append(predicates, identifier.ValueHasPrefix(*i.ValueHasPrefix))
	}
	if i.ValueHasSuffix != nil {
		predicates = append(predicates, identifier.ValueHasSuffix(*i.ValueHasSuffix))
	}
	if i.ValueEqualFold != nil {
		predicates = append(predicates, identifier.ValueEqualFold(*i.ValueEqualFold))
	}
	if i.ValueContainsFold != nil {
		predicates = append(predicates, identifier.ValueContainsFold(*i.ValueContainsFold))
	}

	if i.HasBook != nil {
		p := identifier.HasBook()
		if !*i.HasBook {
			p = identifier.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBookWith))
		for _, w := range i.HasBookWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, identifier.HasBookWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyIdentifierWhereInput
	case 1:
		return predicates[0], nil
	default:
		return identifier.And(predicates...), nil
	}
}

// LanguageWhereInput represents a where input for filtering Language queries.
type LanguageWhereInput struct {
	Predicates []predicate.Language  `json:"-"`
	Not        *LanguageWhereInput   `json:"not,omitempty"`
	Or         []*LanguageWhereInput `json:"or,omitempty"`
	And        []*LanguageWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *LanguageWhereInput) AddPredicates(predicates ...predicate.Language) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the LanguageWhereInput filter on the LanguageQuery builder.
func (i *LanguageWhereInput) Filter(q *LanguageQuery) (*LanguageQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyLanguageWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyLanguageWhereInput is returned in case the LanguageWhereInput is empty.
var ErrEmptyLanguageWhereInput = errors.New("ent: empty predicate LanguageWhereInput")

// P returns a predicate for filtering languages.
// An error is returned if the input is empty or invalid.
func (i *LanguageWhereInput) P() (predicate.Language, error) {
	var predicates []predicate.Language
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, language.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Language, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, language.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Language, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, language.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, language.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, language.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, language.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, language.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, language.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, language.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, language.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, language.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, language.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, language.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, language.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, language.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, language.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, language.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, language.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, language.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, language.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, language.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, language.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, language.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, language.NameContainsFold(*i.NameContainsFold))
	}
	if i.Code != nil {
		predicates = append(predicates, language.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, language.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, language.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, language.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, language.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, language.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, language.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, language.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, language.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, language.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, language.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, language.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, language.CodeContainsFold(*i.CodeContainsFold))
	}

	if i.HasBooks != nil {
		p := language.HasBooks()
		if !*i.HasBooks {
			p = language.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, language.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyLanguageWhereInput
	case 1:
		return predicates[0], nil
	default:
		return language.And(predicates...), nil
	}
}

// PublisherWhereInput represents a where input for filtering Publisher queries.
type PublisherWhereInput struct {
	Predicates []predicate.Publisher  `json:"-"`
	Not        *PublisherWhereInput   `json:"not,omitempty"`
	Or         []*PublisherWhereInput `json:"or,omitempty"`
	And        []*PublisherWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PublisherWhereInput) AddPredicates(predicates ...predicate.Publisher) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PublisherWhereInput filter on the PublisherQuery builder.
func (i *PublisherWhereInput) Filter(q *PublisherQuery) (*PublisherQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPublisherWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPublisherWhereInput is returned in case the PublisherWhereInput is empty.
var ErrEmptyPublisherWhereInput = errors.New("ent: empty predicate PublisherWhereInput")

// P returns a predicate for filtering publishers.
// An error is returned if the input is empty or invalid.
func (i *PublisherWhereInput) P() (predicate.Publisher, error) {
	var predicates []predicate.Publisher
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, publisher.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Publisher, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, publisher.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Publisher, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, publisher.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, publisher.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, publisher.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, publisher.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, publisher.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, publisher.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, publisher.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, publisher.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, publisher.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, publisher.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, publisher.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, publisher.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, publisher.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, publisher.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, publisher.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, publisher.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, publisher.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, publisher.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, publisher.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, publisher.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, publisher.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, publisher.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasBooks != nil {
		p := publisher.HasBooks()
		if !*i.HasBooks {
			p = publisher.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, publisher.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPublisherWhereInput
	case 1:
		return predicates[0], nil
	default:
		return publisher.And(predicates...), nil
	}
}

// SeriesWhereInput represents a where input for filtering Series queries.
type SeriesWhereInput struct {
	Predicates []predicate.Series  `json:"-"`
	Not        *SeriesWhereInput   `json:"not,omitempty"`
	Or         []*SeriesWhereInput `json:"or,omitempty"`
	And        []*SeriesWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`

	// "series_books" edge predicates.
	HasSeriesBooks     *bool                   `json:"hasSeriesBooks,omitempty"`
	HasSeriesBooksWith []*SeriesBookWhereInput `json:"hasSeriesBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SeriesWhereInput) AddPredicates(predicates ...predicate.Series) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SeriesWhereInput filter on the SeriesQuery builder.
func (i *SeriesWhereInput) Filter(q *SeriesQuery) (*SeriesQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySeriesWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySeriesWhereInput is returned in case the SeriesWhereInput is empty.
var ErrEmptySeriesWhereInput = errors.New("ent: empty predicate SeriesWhereInput")

// P returns a predicate for filtering seriesslice.
// An error is returned if the input is empty or invalid.
func (i *SeriesWhereInput) P() (predicate.Series, error) {
	var predicates []predicate.Series
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, series.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Series, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, series.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Series, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, series.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, series.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, series.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, series.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, series.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, series.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, series.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, series.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, series.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, series.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, series.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, series.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, series.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, series.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, series.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, series.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, series.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, series.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, series.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, series.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, series.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, series.NameContainsFold(*i.NameContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, series.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, series.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, series.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, series.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, series.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, series.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, series.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, series.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, series.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, series.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, series.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, series.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, series.SortContainsFold(*i.SortContainsFold))
	}

	if i.HasBooks != nil {
		p := series.HasBooks()
		if !*i.HasBooks {
			p = series.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, series.HasBooksWith(with...))
	}
	if i.HasSeriesBooks != nil {
		p := series.HasSeriesBooks()
		if !*i.HasSeriesBooks {
			p = series.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSeriesBooksWith) > 0 {
		with := make([]predicate.SeriesBook, 0, len(i.HasSeriesBooksWith))
		for _, w := range i.HasSeriesBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSeriesBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, series.HasSeriesBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySeriesWhereInput
	case 1:
		return predicates[0], nil
	default:
		return series.And(predicates...), nil
	}
}

// SeriesBookWhereInput represents a where input for filtering SeriesBook queries.
type SeriesBookWhereInput struct {
	Predicates []predicate.SeriesBook  `json:"-"`
	Not        *SeriesBookWhereInput   `json:"not,omitempty"`
	Or         []*SeriesBookWhereInput `json:"or,omitempty"`
	And        []*SeriesBookWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "series_index" field predicates.
	SeriesIndex       *float64  `json:"seriesIndex,omitempty"`
	SeriesIndexNEQ    *float64  `json:"seriesIndexNEQ,omitempty"`
	SeriesIndexIn     []float64 `json:"seriesIndexIn,omitempty"`
	SeriesIndexNotIn  []float64 `json:"seriesIndexNotIn,omitempty"`
	SeriesIndexGT     *float64  `json:"seriesIndexGT,omitempty"`
	SeriesIndexGTE    *float64  `json:"seriesIndexGTE,omitempty"`
	SeriesIndexLT     *float64  `json:"seriesIndexLT,omitempty"`
	SeriesIndexLTE    *float64  `json:"seriesIndexLTE,omitempty"`
	SeriesIndexIsNil  bool      `json:"seriesIndexIsNil,omitempty"`
	SeriesIndexNotNil bool      `json:"seriesIndexNotNil,omitempty"`

	// "series_id" field predicates.
	SeriesID             *ksuid.ID  `json:"seriesID,omitempty"`
	SeriesIDNEQ          *ksuid.ID  `json:"seriesIDNEQ,omitempty"`
	SeriesIDIn           []ksuid.ID `json:"seriesIDIn,omitempty"`
	SeriesIDNotIn        []ksuid.ID `json:"seriesIDNotIn,omitempty"`
	SeriesIDGT           *ksuid.ID  `json:"seriesIDGT,omitempty"`
	SeriesIDGTE          *ksuid.ID  `json:"seriesIDGTE,omitempty"`
	SeriesIDLT           *ksuid.ID  `json:"seriesIDLT,omitempty"`
	SeriesIDLTE          *ksuid.ID  `json:"seriesIDLTE,omitempty"`
	SeriesIDContains     *ksuid.ID  `json:"seriesIDContains,omitempty"`
	SeriesIDHasPrefix    *ksuid.ID  `json:"seriesIDHasPrefix,omitempty"`
	SeriesIDHasSuffix    *ksuid.ID  `json:"seriesIDHasSuffix,omitempty"`
	SeriesIDEqualFold    *ksuid.ID  `json:"seriesIDEqualFold,omitempty"`
	SeriesIDContainsFold *ksuid.ID  `json:"seriesIDContainsFold,omitempty"`

	// "book_id" field predicates.
	BookID             *ksuid.ID  `json:"bookID,omitempty"`
	BookIDNEQ          *ksuid.ID  `json:"bookIDNEQ,omitempty"`
	BookIDIn           []ksuid.ID `json:"bookIDIn,omitempty"`
	BookIDNotIn        []ksuid.ID `json:"bookIDNotIn,omitempty"`
	BookIDGT           *ksuid.ID  `json:"bookIDGT,omitempty"`
	BookIDGTE          *ksuid.ID  `json:"bookIDGTE,omitempty"`
	BookIDLT           *ksuid.ID  `json:"bookIDLT,omitempty"`
	BookIDLTE          *ksuid.ID  `json:"bookIDLTE,omitempty"`
	BookIDContains     *ksuid.ID  `json:"bookIDContains,omitempty"`
	BookIDHasPrefix    *ksuid.ID  `json:"bookIDHasPrefix,omitempty"`
	BookIDHasSuffix    *ksuid.ID  `json:"bookIDHasSuffix,omitempty"`
	BookIDEqualFold    *ksuid.ID  `json:"bookIDEqualFold,omitempty"`
	BookIDContainsFold *ksuid.ID  `json:"bookIDContainsFold,omitempty"`

	// "series" edge predicates.
	HasSeries     *bool               `json:"hasSeries,omitempty"`
	HasSeriesWith []*SeriesWhereInput `json:"hasSeriesWith,omitempty"`

	// "book" edge predicates.
	HasBook     *bool             `json:"hasBook,omitempty"`
	HasBookWith []*BookWhereInput `json:"hasBookWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SeriesBookWhereInput) AddPredicates(predicates ...predicate.SeriesBook) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SeriesBookWhereInput filter on the SeriesBookQuery builder.
func (i *SeriesBookWhereInput) Filter(q *SeriesBookQuery) (*SeriesBookQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySeriesBookWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySeriesBookWhereInput is returned in case the SeriesBookWhereInput is empty.
var ErrEmptySeriesBookWhereInput = errors.New("ent: empty predicate SeriesBookWhereInput")

// P returns a predicate for filtering seriesbooks.
// An error is returned if the input is empty or invalid.
func (i *SeriesBookWhereInput) P() (predicate.SeriesBook, error) {
	var predicates []predicate.SeriesBook
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, seriesbook.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.SeriesBook, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, seriesbook.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.SeriesBook, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, seriesbook.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, seriesbook.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, seriesbook.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, seriesbook.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, seriesbook.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, seriesbook.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, seriesbook.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, seriesbook.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, seriesbook.IDLTE(*i.IDLTE))
	}
	if i.SeriesIndex != nil {
		predicates = append(predicates, seriesbook.SeriesIndexEQ(*i.SeriesIndex))
	}
	if i.SeriesIndexNEQ != nil {
		predicates = append(predicates, seriesbook.SeriesIndexNEQ(*i.SeriesIndexNEQ))
	}
	if len(i.SeriesIndexIn) > 0 {
		predicates = append(predicates, seriesbook.SeriesIndexIn(i.SeriesIndexIn...))
	}
	if len(i.SeriesIndexNotIn) > 0 {
		predicates = append(predicates, seriesbook.SeriesIndexNotIn(i.SeriesIndexNotIn...))
	}
	if i.SeriesIndexGT != nil {
		predicates = append(predicates, seriesbook.SeriesIndexGT(*i.SeriesIndexGT))
	}
	if i.SeriesIndexGTE != nil {
		predicates = append(predicates, seriesbook.SeriesIndexGTE(*i.SeriesIndexGTE))
	}
	if i.SeriesIndexLT != nil {
		predicates = append(predicates, seriesbook.SeriesIndexLT(*i.SeriesIndexLT))
	}
	if i.SeriesIndexLTE != nil {
		predicates = append(predicates, seriesbook.SeriesIndexLTE(*i.SeriesIndexLTE))
	}
	if i.SeriesIndexIsNil {
		predicates = append(predicates, seriesbook.SeriesIndexIsNil())
	}
	if i.SeriesIndexNotNil {
		predicates = append(predicates, seriesbook.SeriesIndexNotNil())
	}
	if i.SeriesID != nil {
		predicates = append(predicates, seriesbook.SeriesIDEQ(*i.SeriesID))
	}
	if i.SeriesIDNEQ != nil {
		predicates = append(predicates, seriesbook.SeriesIDNEQ(*i.SeriesIDNEQ))
	}
	if len(i.SeriesIDIn) > 0 {
		predicates = append(predicates, seriesbook.SeriesIDIn(i.SeriesIDIn...))
	}
	if len(i.SeriesIDNotIn) > 0 {
		predicates = append(predicates, seriesbook.SeriesIDNotIn(i.SeriesIDNotIn...))
	}
	if i.SeriesIDGT != nil {
		predicates = append(predicates, seriesbook.SeriesIDGT(*i.SeriesIDGT))
	}
	if i.SeriesIDGTE != nil {
		predicates = append(predicates, seriesbook.SeriesIDGTE(*i.SeriesIDGTE))
	}
	if i.SeriesIDLT != nil {
		predicates = append(predicates, seriesbook.SeriesIDLT(*i.SeriesIDLT))
	}
	if i.SeriesIDLTE != nil {
		predicates = append(predicates, seriesbook.SeriesIDLTE(*i.SeriesIDLTE))
	}
	if i.SeriesIDContains != nil {
		predicates = append(predicates, seriesbook.SeriesIDContains(*i.SeriesIDContains))
	}
	if i.SeriesIDHasPrefix != nil {
		predicates = append(predicates, seriesbook.SeriesIDHasPrefix(*i.SeriesIDHasPrefix))
	}
	if i.SeriesIDHasSuffix != nil {
		predicates = append(predicates, seriesbook.SeriesIDHasSuffix(*i.SeriesIDHasSuffix))
	}
	if i.SeriesIDEqualFold != nil {
		predicates = append(predicates, seriesbook.SeriesIDEqualFold(*i.SeriesIDEqualFold))
	}
	if i.SeriesIDContainsFold != nil {
		predicates = append(predicates, seriesbook.SeriesIDContainsFold(*i.SeriesIDContainsFold))
	}
	if i.BookID != nil {
		predicates = append(predicates, seriesbook.BookIDEQ(*i.BookID))
	}
	if i.BookIDNEQ != nil {
		predicates = append(predicates, seriesbook.BookIDNEQ(*i.BookIDNEQ))
	}
	if len(i.BookIDIn) > 0 {
		predicates = append(predicates, seriesbook.BookIDIn(i.BookIDIn...))
	}
	if len(i.BookIDNotIn) > 0 {
		predicates = append(predicates, seriesbook.BookIDNotIn(i.BookIDNotIn...))
	}
	if i.BookIDGT != nil {
		predicates = append(predicates, seriesbook.BookIDGT(*i.BookIDGT))
	}
	if i.BookIDGTE != nil {
		predicates = append(predicates, seriesbook.BookIDGTE(*i.BookIDGTE))
	}
	if i.BookIDLT != nil {
		predicates = append(predicates, seriesbook.BookIDLT(*i.BookIDLT))
	}
	if i.BookIDLTE != nil {
		predicates = append(predicates, seriesbook.BookIDLTE(*i.BookIDLTE))
	}
	if i.BookIDContains != nil {
		predicates = append(predicates, seriesbook.BookIDContains(*i.BookIDContains))
	}
	if i.BookIDHasPrefix != nil {
		predicates = append(predicates, seriesbook.BookIDHasPrefix(*i.BookIDHasPrefix))
	}
	if i.BookIDHasSuffix != nil {
		predicates = append(predicates, seriesbook.BookIDHasSuffix(*i.BookIDHasSuffix))
	}
	if i.BookIDEqualFold != nil {
		predicates = append(predicates, seriesbook.BookIDEqualFold(*i.BookIDEqualFold))
	}
	if i.BookIDContainsFold != nil {
		predicates = append(predicates, seriesbook.BookIDContainsFold(*i.BookIDContainsFold))
	}

	if i.HasSeries != nil {
		p := seriesbook.HasSeries()
		if !*i.HasSeries {
			p = seriesbook.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSeriesWith) > 0 {
		with := make([]predicate.Series, 0, len(i.HasSeriesWith))
		for _, w := range i.HasSeriesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSeriesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, seriesbook.HasSeriesWith(with...))
	}
	if i.HasBook != nil {
		p := seriesbook.HasBook()
		if !*i.HasBook {
			p = seriesbook.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBookWith))
		for _, w := range i.HasBookWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, seriesbook.HasBookWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySeriesBookWhereInput
	case 1:
		return predicates[0], nil
	default:
		return seriesbook.And(predicates...), nil
	}
}

// ShelfWhereInput represents a where input for filtering Shelf queries.
type ShelfWhereInput struct {
	Predicates []predicate.Shelf  `json:"-"`
	Not        *ShelfWhereInput   `json:"not,omitempty"`
	Or         []*ShelfWhereInput `json:"or,omitempty"`
	And        []*ShelfWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *ksuid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *ksuid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []ksuid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []ksuid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *ksuid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *ksuid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *ksuid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *ksuid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *ksuid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *ksuid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *ksuid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *ksuid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *ksuid.ID  `json:"userIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "public" field predicates.
	Public    *bool `json:"public,omitempty"`
	PublicNEQ *bool `json:"publicNEQ,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ShelfWhereInput) AddPredicates(predicates ...predicate.Shelf) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ShelfWhereInput filter on the ShelfQuery builder.
func (i *ShelfWhereInput) Filter(q *ShelfQuery) (*ShelfQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyShelfWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyShelfWhereInput is returned in case the ShelfWhereInput is empty.
var ErrEmptyShelfWhereInput = errors.New("ent: empty predicate ShelfWhereInput")

// P returns a predicate for filtering shelves.
// An error is returned if the input is empty or invalid.
func (i *ShelfWhereInput) P() (predicate.Shelf, error) {
	var predicates []predicate.Shelf
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, shelf.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Shelf, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, shelf.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Shelf, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, shelf.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, shelf.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, shelf.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, shelf.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, shelf.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, shelf.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, shelf.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, shelf.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, shelf.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, shelf.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, shelf.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, shelf.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, shelf.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, shelf.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, shelf.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, shelf.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, shelf.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, shelf.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, shelf.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, shelf.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, shelf.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, shelf.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, shelf.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, shelf.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, shelf.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, shelf.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, shelf.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, shelf.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, shelf.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, shelf.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, shelf.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, shelf.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, shelf.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, shelf.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, shelf.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, shelf.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, shelf.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, shelf.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, shelf.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, shelf.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, shelf.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, shelf.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, shelf.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, shelf.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, shelf.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, shelf.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, shelf.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, shelf.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, shelf.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, shelf.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Public != nil {
		predicates = append(predicates, shelf.PublicEQ(*i.Public))
	}
	if i.PublicNEQ != nil {
		predicates = append(predicates, shelf.PublicNEQ(*i.PublicNEQ))
	}

	if i.HasUser != nil {
		p := shelf.HasUser()
		if !*i.HasUser {
			p = shelf.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, shelf.HasUserWith(with...))
	}
	if i.HasBooks != nil {
		p := shelf.HasBooks()
		if !*i.HasBooks {
			p = shelf.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, shelf.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyShelfWhereInput
	case 1:
		return predicates[0], nil
	default:
		return shelf.And(predicates...), nil
	}
}

// TagWhereInput represents a where input for filtering Tag queries.
type TagWhereInput struct {
	Predicates []predicate.Tag  `json:"-"`
	Not        *TagWhereInput   `json:"not,omitempty"`
	Or         []*TagWhereInput `json:"or,omitempty"`
	And        []*TagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TagWhereInput) AddPredicates(predicates ...predicate.Tag) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TagWhereInput filter on the TagQuery builder.
func (i *TagWhereInput) Filter(q *TagQuery) (*TagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTagWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTagWhereInput is returned in case the TagWhereInput is empty.
var ErrEmptyTagWhereInput = errors.New("ent: empty predicate TagWhereInput")

// P returns a predicate for filtering tags.
// An error is returned if the input is empty or invalid.
func (i *TagWhereInput) P() (predicate.Tag, error) {
	var predicates []predicate.Tag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tag.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tag.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tag.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tag.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tag.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tag.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tag.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tag.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tag.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tag.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tag.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tag.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tag.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tag.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tag.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasBooks != nil {
		p := tag.HasBooks()
		if !*i.HasBooks {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTagWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tag.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "passwordHash" field predicates.
	PasswordHash             *string  `json:"passwordhash,omitempty"`
	PasswordHashNEQ          *string  `json:"passwordhashNEQ,omitempty"`
	PasswordHashIn           []string `json:"passwordhashIn,omitempty"`
	PasswordHashNotIn        []string `json:"passwordhashNotIn,omitempty"`
	PasswordHashGT           *string  `json:"passwordhashGT,omitempty"`
	PasswordHashGTE          *string  `json:"passwordhashGTE,omitempty"`
	PasswordHashLT           *string  `json:"passwordhashLT,omitempty"`
	PasswordHashLTE          *string  `json:"passwordhashLTE,omitempty"`
	PasswordHashContains     *string  `json:"passwordhashContains,omitempty"`
	PasswordHashHasPrefix    *string  `json:"passwordhashHasPrefix,omitempty"`
	PasswordHashHasSuffix    *string  `json:"passwordhashHasSuffix,omitempty"`
	PasswordHashIsNil        bool     `json:"passwordhashIsNil,omitempty"`
	PasswordHashNotNil       bool     `json:"passwordhashNotNil,omitempty"`
	PasswordHashEqualFold    *string  `json:"passwordhashEqualFold,omitempty"`
	PasswordHashContainsFold *string  `json:"passwordhashContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "shelves" edge predicates.
	HasShelves     *bool              `json:"hasShelves,omitempty"`
	HasShelvesWith []*ShelfWhereInput `json:"hasShelvesWith,omitempty"`

	// "userPermissions" edge predicates.
	HasUserPermissions     *bool                        `json:"hasUserPermissions,omitempty"`
	HasUserPermissionsWith []*UserPermissionsWhereInput `json:"hasUserPermissionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.PasswordHash != nil {
		predicates = append(predicates, user.PasswordHashEQ(*i.PasswordHash))
	}
	if i.PasswordHashNEQ != nil {
		predicates = append(predicates, user.PasswordHashNEQ(*i.PasswordHashNEQ))
	}
	if len(i.PasswordHashIn) > 0 {
		predicates = append(predicates, user.PasswordHashIn(i.PasswordHashIn...))
	}
	if len(i.PasswordHashNotIn) > 0 {
		predicates = append(predicates, user.PasswordHashNotIn(i.PasswordHashNotIn...))
	}
	if i.PasswordHashGT != nil {
		predicates = append(predicates, user.PasswordHashGT(*i.PasswordHashGT))
	}
	if i.PasswordHashGTE != nil {
		predicates = append(predicates, user.PasswordHashGTE(*i.PasswordHashGTE))
	}
	if i.PasswordHashLT != nil {
		predicates = append(predicates, user.PasswordHashLT(*i.PasswordHashLT))
	}
	if i.PasswordHashLTE != nil {
		predicates = append(predicates, user.PasswordHashLTE(*i.PasswordHashLTE))
	}
	if i.PasswordHashContains != nil {
		predicates = append(predicates, user.PasswordHashContains(*i.PasswordHashContains))
	}
	if i.PasswordHashHasPrefix != nil {
		predicates = append(predicates, user.PasswordHashHasPrefix(*i.PasswordHashHasPrefix))
	}
	if i.PasswordHashHasSuffix != nil {
		predicates = append(predicates, user.PasswordHashHasSuffix(*i.PasswordHashHasSuffix))
	}
	if i.PasswordHashIsNil {
		predicates = append(predicates, user.PasswordHashIsNil())
	}
	if i.PasswordHashNotNil {
		predicates = append(predicates, user.PasswordHashNotNil())
	}
	if i.PasswordHashEqualFold != nil {
		predicates = append(predicates, user.PasswordHashEqualFold(*i.PasswordHashEqualFold))
	}
	if i.PasswordHashContainsFold != nil {
		predicates = append(predicates, user.PasswordHashContainsFold(*i.PasswordHashContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}

	if i.HasShelves != nil {
		p := user.HasShelves()
		if !*i.HasShelves {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasShelvesWith) > 0 {
		with := make([]predicate.Shelf, 0, len(i.HasShelvesWith))
		for _, w := range i.HasShelvesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasShelvesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasShelvesWith(with...))
	}
	if i.HasUserPermissions != nil {
		p := user.HasUserPermissions()
		if !*i.HasUserPermissions {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserPermissionsWith) > 0 {
		with := make([]predicate.UserPermissions, 0, len(i.HasUserPermissionsWith))
		for _, w := range i.HasUserPermissionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserPermissionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasUserPermissionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// UserPermissionsWhereInput represents a where input for filtering UserPermissions queries.
type UserPermissionsWhereInput struct {
	Predicates []predicate.UserPermissions  `json:"-"`
	Not        *UserPermissionsWhereInput   `json:"not,omitempty"`
	Or         []*UserPermissionsWhereInput `json:"or,omitempty"`
	And        []*UserPermissionsWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *ksuid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *ksuid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []ksuid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []ksuid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *ksuid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *ksuid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *ksuid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *ksuid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *ksuid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *ksuid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *ksuid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDIsNil        bool       `json:"userIDIsNil,omitempty"`
	UserIDNotNil       bool       `json:"userIDNotNil,omitempty"`
	UserIDEqualFold    *ksuid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *ksuid.ID  `json:"userIDContainsFold,omitempty"`

	// "admin" field predicates.
	Admin    *bool `json:"admin,omitempty"`
	AdminNEQ *bool `json:"adminNEQ,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserPermissionsWhereInput) AddPredicates(predicates ...predicate.UserPermissions) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserPermissionsWhereInput filter on the UserPermissionsQuery builder.
func (i *UserPermissionsWhereInput) Filter(q *UserPermissionsQuery) (*UserPermissionsQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserPermissionsWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserPermissionsWhereInput is returned in case the UserPermissionsWhereInput is empty.
var ErrEmptyUserPermissionsWhereInput = errors.New("ent: empty predicate UserPermissionsWhereInput")

// P returns a predicate for filtering userpermissionsslice.
// An error is returned if the input is empty or invalid.
func (i *UserPermissionsWhereInput) P() (predicate.UserPermissions, error) {
	var predicates []predicate.UserPermissions
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, userpermissions.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.UserPermissions, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, userpermissions.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.UserPermissions, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, userpermissions.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, userpermissions.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, userpermissions.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, userpermissions.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, userpermissions.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, userpermissions.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, userpermissions.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, userpermissions.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, userpermissions.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, userpermissions.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, userpermissions.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, userpermissions.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, userpermissions.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, userpermissions.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, userpermissions.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, userpermissions.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, userpermissions.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, userpermissions.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, userpermissions.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, userpermissions.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDIsNil {
		predicates = append(predicates, userpermissions.UserIDIsNil())
	}
	if i.UserIDNotNil {
		predicates = append(predicates, userpermissions.UserIDNotNil())
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, userpermissions.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, userpermissions.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Admin != nil {
		predicates = append(predicates, userpermissions.AdminEQ(*i.Admin))
	}
	if i.AdminNEQ != nil {
		predicates = append(predicates, userpermissions.AdminNEQ(*i.AdminNEQ))
	}

	if i.HasUser != nil {
		p := userpermissions.HasUser()
		if !*i.HasUser {
			p = userpermissions.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, userpermissions.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserPermissionsWhereInput
	case 1:
		return predicates[0], nil
	default:
		return userpermissions.And(predicates...), nil
	}
}
