// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/schema/ksuid"
	"time"
)

// AuthorWhereInput represents a where input for filtering Author queries.
type AuthorWhereInput struct {
	Predicates []predicate.Author  `json:"-"`
	Not        *AuthorWhereInput   `json:"not,omitempty"`
	Or         []*AuthorWhereInput `json:"or,omitempty"`
	And        []*AuthorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "link" field predicates.
	Link             *string  `json:"link,omitempty"`
	LinkNEQ          *string  `json:"linkNEQ,omitempty"`
	LinkIn           []string `json:"linkIn,omitempty"`
	LinkNotIn        []string `json:"linkNotIn,omitempty"`
	LinkGT           *string  `json:"linkGT,omitempty"`
	LinkGTE          *string  `json:"linkGTE,omitempty"`
	LinkLT           *string  `json:"linkLT,omitempty"`
	LinkLTE          *string  `json:"linkLTE,omitempty"`
	LinkContains     *string  `json:"linkContains,omitempty"`
	LinkHasPrefix    *string  `json:"linkHasPrefix,omitempty"`
	LinkHasSuffix    *string  `json:"linkHasSuffix,omitempty"`
	LinkIsNil        bool     `json:"linkIsNil,omitempty"`
	LinkNotNil       bool     `json:"linkNotNil,omitempty"`
	LinkEqualFold    *string  `json:"linkEqualFold,omitempty"`
	LinkContainsFold *string  `json:"linkContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AuthorWhereInput) AddPredicates(predicates ...predicate.Author) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AuthorWhereInput filter on the AuthorQuery builder.
func (i *AuthorWhereInput) Filter(q *AuthorQuery) (*AuthorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAuthorWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAuthorWhereInput is returned in case the AuthorWhereInput is empty.
var ErrEmptyAuthorWhereInput = errors.New("ent: empty predicate AuthorWhereInput")

// P returns a predicate for filtering authors.
// An error is returned if the input is empty or invalid.
func (i *AuthorWhereInput) P() (predicate.Author, error) {
	var predicates []predicate.Author
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, author.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Author, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, author.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Author, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, author.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, author.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, author.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, author.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, author.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, author.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, author.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, author.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, author.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, author.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, author.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, author.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, author.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, author.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, author.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, author.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, author.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, author.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, author.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, author.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, author.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, author.NameContainsFold(*i.NameContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, author.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, author.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, author.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, author.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, author.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, author.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, author.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, author.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, author.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, author.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, author.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, author.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, author.SortContainsFold(*i.SortContainsFold))
	}
	if i.Link != nil {
		predicates = append(predicates, author.LinkEQ(*i.Link))
	}
	if i.LinkNEQ != nil {
		predicates = append(predicates, author.LinkNEQ(*i.LinkNEQ))
	}
	if len(i.LinkIn) > 0 {
		predicates = append(predicates, author.LinkIn(i.LinkIn...))
	}
	if len(i.LinkNotIn) > 0 {
		predicates = append(predicates, author.LinkNotIn(i.LinkNotIn...))
	}
	if i.LinkGT != nil {
		predicates = append(predicates, author.LinkGT(*i.LinkGT))
	}
	if i.LinkGTE != nil {
		predicates = append(predicates, author.LinkGTE(*i.LinkGTE))
	}
	if i.LinkLT != nil {
		predicates = append(predicates, author.LinkLT(*i.LinkLT))
	}
	if i.LinkLTE != nil {
		predicates = append(predicates, author.LinkLTE(*i.LinkLTE))
	}
	if i.LinkContains != nil {
		predicates = append(predicates, author.LinkContains(*i.LinkContains))
	}
	if i.LinkHasPrefix != nil {
		predicates = append(predicates, author.LinkHasPrefix(*i.LinkHasPrefix))
	}
	if i.LinkHasSuffix != nil {
		predicates = append(predicates, author.LinkHasSuffix(*i.LinkHasSuffix))
	}
	if i.LinkIsNil {
		predicates = append(predicates, author.LinkIsNil())
	}
	if i.LinkNotNil {
		predicates = append(predicates, author.LinkNotNil())
	}
	if i.LinkEqualFold != nil {
		predicates = append(predicates, author.LinkEqualFold(*i.LinkEqualFold))
	}
	if i.LinkContainsFold != nil {
		predicates = append(predicates, author.LinkContainsFold(*i.LinkContainsFold))
	}

	if i.HasBooks != nil {
		p := author.HasBooks()
		if !*i.HasBooks {
			p = author.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, author.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAuthorWhereInput
	case 1:
		return predicates[0], nil
	default:
		return author.And(predicates...), nil
	}
}

// BookWhereInput represents a where input for filtering Book queries.
type BookWhereInput struct {
	Predicates []predicate.Book  `json:"-"`
	Not        *BookWhereInput   `json:"not,omitempty"`
	Or         []*BookWhereInput `json:"or,omitempty"`
	And        []*BookWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "addedAt" field predicates.
	AddedAt      *time.Time  `json:"addedat,omitempty"`
	AddedAtNEQ   *time.Time  `json:"addedatNEQ,omitempty"`
	AddedAtIn    []time.Time `json:"addedatIn,omitempty"`
	AddedAtNotIn []time.Time `json:"addedatNotIn,omitempty"`
	AddedAtGT    *time.Time  `json:"addedatGT,omitempty"`
	AddedAtGTE   *time.Time  `json:"addedatGTE,omitempty"`
	AddedAtLT    *time.Time  `json:"addedatLT,omitempty"`
	AddedAtLTE   *time.Time  `json:"addedatLTE,omitempty"`

	// "pubDate" field predicates.
	PubDate       *time.Time  `json:"pubdate,omitempty"`
	PubDateNEQ    *time.Time  `json:"pubdateNEQ,omitempty"`
	PubDateIn     []time.Time `json:"pubdateIn,omitempty"`
	PubDateNotIn  []time.Time `json:"pubdateNotIn,omitempty"`
	PubDateGT     *time.Time  `json:"pubdateGT,omitempty"`
	PubDateGTE    *time.Time  `json:"pubdateGTE,omitempty"`
	PubDateLT     *time.Time  `json:"pubdateLT,omitempty"`
	PubDateLTE    *time.Time  `json:"pubdateLTE,omitempty"`
	PubDateIsNil  bool        `json:"pubdateIsNil,omitempty"`
	PubDateNotNil bool        `json:"pubdateNotNil,omitempty"`

	// "path" field predicates.
	Path             *string  `json:"path,omitempty"`
	PathNEQ          *string  `json:"pathNEQ,omitempty"`
	PathIn           []string `json:"pathIn,omitempty"`
	PathNotIn        []string `json:"pathNotIn,omitempty"`
	PathGT           *string  `json:"pathGT,omitempty"`
	PathGTE          *string  `json:"pathGTE,omitempty"`
	PathLT           *string  `json:"pathLT,omitempty"`
	PathLTE          *string  `json:"pathLTE,omitempty"`
	PathContains     *string  `json:"pathContains,omitempty"`
	PathHasPrefix    *string  `json:"pathHasPrefix,omitempty"`
	PathHasSuffix    *string  `json:"pathHasSuffix,omitempty"`
	PathEqualFold    *string  `json:"pathEqualFold,omitempty"`
	PathContainsFold *string  `json:"pathContainsFold,omitempty"`

	// "isbn" field predicates.
	Isbn             *string  `json:"isbn,omitempty"`
	IsbnNEQ          *string  `json:"isbnNEQ,omitempty"`
	IsbnIn           []string `json:"isbnIn,omitempty"`
	IsbnNotIn        []string `json:"isbnNotIn,omitempty"`
	IsbnGT           *string  `json:"isbnGT,omitempty"`
	IsbnGTE          *string  `json:"isbnGTE,omitempty"`
	IsbnLT           *string  `json:"isbnLT,omitempty"`
	IsbnLTE          *string  `json:"isbnLTE,omitempty"`
	IsbnContains     *string  `json:"isbnContains,omitempty"`
	IsbnHasPrefix    *string  `json:"isbnHasPrefix,omitempty"`
	IsbnHasSuffix    *string  `json:"isbnHasSuffix,omitempty"`
	IsbnIsNil        bool     `json:"isbnIsNil,omitempty"`
	IsbnNotNil       bool     `json:"isbnNotNil,omitempty"`
	IsbnEqualFold    *string  `json:"isbnEqualFold,omitempty"`
	IsbnContainsFold *string  `json:"isbnContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "authors" edge predicates.
	HasAuthors     *bool               `json:"hasAuthors,omitempty"`
	HasAuthorsWith []*AuthorWhereInput `json:"hasAuthorsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BookWhereInput) AddPredicates(predicates ...predicate.Book) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BookWhereInput filter on the BookQuery builder.
func (i *BookWhereInput) Filter(q *BookQuery) (*BookQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBookWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBookWhereInput is returned in case the BookWhereInput is empty.
var ErrEmptyBookWhereInput = errors.New("ent: empty predicate BookWhereInput")

// P returns a predicate for filtering books.
// An error is returned if the input is empty or invalid.
func (i *BookWhereInput) P() (predicate.Book, error) {
	var predicates []predicate.Book
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, book.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Book, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, book.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Book, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, book.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, book.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, book.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, book.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, book.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, book.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, book.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, book.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, book.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, book.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, book.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, book.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, book.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, book.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, book.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, book.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, book.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, book.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, book.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, book.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, book.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, book.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, book.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, book.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, book.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, book.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, book.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, book.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, book.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, book.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, book.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, book.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, book.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, book.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, book.SortContainsFold(*i.SortContainsFold))
	}
	if i.AddedAt != nil {
		predicates = append(predicates, book.AddedAtEQ(*i.AddedAt))
	}
	if i.AddedAtNEQ != nil {
		predicates = append(predicates, book.AddedAtNEQ(*i.AddedAtNEQ))
	}
	if len(i.AddedAtIn) > 0 {
		predicates = append(predicates, book.AddedAtIn(i.AddedAtIn...))
	}
	if len(i.AddedAtNotIn) > 0 {
		predicates = append(predicates, book.AddedAtNotIn(i.AddedAtNotIn...))
	}
	if i.AddedAtGT != nil {
		predicates = append(predicates, book.AddedAtGT(*i.AddedAtGT))
	}
	if i.AddedAtGTE != nil {
		predicates = append(predicates, book.AddedAtGTE(*i.AddedAtGTE))
	}
	if i.AddedAtLT != nil {
		predicates = append(predicates, book.AddedAtLT(*i.AddedAtLT))
	}
	if i.AddedAtLTE != nil {
		predicates = append(predicates, book.AddedAtLTE(*i.AddedAtLTE))
	}
	if i.PubDate != nil {
		predicates = append(predicates, book.PubDateEQ(*i.PubDate))
	}
	if i.PubDateNEQ != nil {
		predicates = append(predicates, book.PubDateNEQ(*i.PubDateNEQ))
	}
	if len(i.PubDateIn) > 0 {
		predicates = append(predicates, book.PubDateIn(i.PubDateIn...))
	}
	if len(i.PubDateNotIn) > 0 {
		predicates = append(predicates, book.PubDateNotIn(i.PubDateNotIn...))
	}
	if i.PubDateGT != nil {
		predicates = append(predicates, book.PubDateGT(*i.PubDateGT))
	}
	if i.PubDateGTE != nil {
		predicates = append(predicates, book.PubDateGTE(*i.PubDateGTE))
	}
	if i.PubDateLT != nil {
		predicates = append(predicates, book.PubDateLT(*i.PubDateLT))
	}
	if i.PubDateLTE != nil {
		predicates = append(predicates, book.PubDateLTE(*i.PubDateLTE))
	}
	if i.PubDateIsNil {
		predicates = append(predicates, book.PubDateIsNil())
	}
	if i.PubDateNotNil {
		predicates = append(predicates, book.PubDateNotNil())
	}
	if i.Path != nil {
		predicates = append(predicates, book.PathEQ(*i.Path))
	}
	if i.PathNEQ != nil {
		predicates = append(predicates, book.PathNEQ(*i.PathNEQ))
	}
	if len(i.PathIn) > 0 {
		predicates = append(predicates, book.PathIn(i.PathIn...))
	}
	if len(i.PathNotIn) > 0 {
		predicates = append(predicates, book.PathNotIn(i.PathNotIn...))
	}
	if i.PathGT != nil {
		predicates = append(predicates, book.PathGT(*i.PathGT))
	}
	if i.PathGTE != nil {
		predicates = append(predicates, book.PathGTE(*i.PathGTE))
	}
	if i.PathLT != nil {
		predicates = append(predicates, book.PathLT(*i.PathLT))
	}
	if i.PathLTE != nil {
		predicates = append(predicates, book.PathLTE(*i.PathLTE))
	}
	if i.PathContains != nil {
		predicates = append(predicates, book.PathContains(*i.PathContains))
	}
	if i.PathHasPrefix != nil {
		predicates = append(predicates, book.PathHasPrefix(*i.PathHasPrefix))
	}
	if i.PathHasSuffix != nil {
		predicates = append(predicates, book.PathHasSuffix(*i.PathHasSuffix))
	}
	if i.PathEqualFold != nil {
		predicates = append(predicates, book.PathEqualFold(*i.PathEqualFold))
	}
	if i.PathContainsFold != nil {
		predicates = append(predicates, book.PathContainsFold(*i.PathContainsFold))
	}
	if i.Isbn != nil {
		predicates = append(predicates, book.IsbnEQ(*i.Isbn))
	}
	if i.IsbnNEQ != nil {
		predicates = append(predicates, book.IsbnNEQ(*i.IsbnNEQ))
	}
	if len(i.IsbnIn) > 0 {
		predicates = append(predicates, book.IsbnIn(i.IsbnIn...))
	}
	if len(i.IsbnNotIn) > 0 {
		predicates = append(predicates, book.IsbnNotIn(i.IsbnNotIn...))
	}
	if i.IsbnGT != nil {
		predicates = append(predicates, book.IsbnGT(*i.IsbnGT))
	}
	if i.IsbnGTE != nil {
		predicates = append(predicates, book.IsbnGTE(*i.IsbnGTE))
	}
	if i.IsbnLT != nil {
		predicates = append(predicates, book.IsbnLT(*i.IsbnLT))
	}
	if i.IsbnLTE != nil {
		predicates = append(predicates, book.IsbnLTE(*i.IsbnLTE))
	}
	if i.IsbnContains != nil {
		predicates = append(predicates, book.IsbnContains(*i.IsbnContains))
	}
	if i.IsbnHasPrefix != nil {
		predicates = append(predicates, book.IsbnHasPrefix(*i.IsbnHasPrefix))
	}
	if i.IsbnHasSuffix != nil {
		predicates = append(predicates, book.IsbnHasSuffix(*i.IsbnHasSuffix))
	}
	if i.IsbnIsNil {
		predicates = append(predicates, book.IsbnIsNil())
	}
	if i.IsbnNotNil {
		predicates = append(predicates, book.IsbnNotNil())
	}
	if i.IsbnEqualFold != nil {
		predicates = append(predicates, book.IsbnEqualFold(*i.IsbnEqualFold))
	}
	if i.IsbnContainsFold != nil {
		predicates = append(predicates, book.IsbnContainsFold(*i.IsbnContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, book.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, book.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, book.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, book.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, book.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, book.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, book.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, book.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, book.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, book.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, book.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, book.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, book.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, book.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, book.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasAuthors != nil {
		p := book.HasAuthors()
		if !*i.HasAuthors {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorsWith) > 0 {
		with := make([]predicate.Author, 0, len(i.HasAuthorsWith))
		for _, w := range i.HasAuthorsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthorsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasAuthorsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBookWhereInput
	case 1:
		return predicates[0], nil
	default:
		return book.And(predicates...), nil
	}
}
