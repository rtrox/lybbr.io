// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/identifier"
	"lybbrio/internal/ent/schema/ksuid"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IdentifierCreate is the builder for creating a Identifier entity.
type IdentifierCreate struct {
	config
	mutation *IdentifierMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ic *IdentifierCreate) SetType(i identifier.Type) *IdentifierCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetValue sets the "value" field.
func (ic *IdentifierCreate) SetValue(s string) *IdentifierCreate {
	ic.mutation.SetValue(s)
	return ic
}

// SetID sets the "id" field.
func (ic *IdentifierCreate) SetID(k ksuid.ID) *IdentifierCreate {
	ic.mutation.SetID(k)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IdentifierCreate) SetNillableID(k *ksuid.ID) *IdentifierCreate {
	if k != nil {
		ic.SetID(*k)
	}
	return ic
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (ic *IdentifierCreate) SetBookID(id ksuid.ID) *IdentifierCreate {
	ic.mutation.SetBookID(id)
	return ic
}

// SetBook sets the "book" edge to the Book entity.
func (ic *IdentifierCreate) SetBook(b *Book) *IdentifierCreate {
	return ic.SetBookID(b.ID)
}

// Mutation returns the IdentifierMutation object of the builder.
func (ic *IdentifierCreate) Mutation() *IdentifierMutation {
	return ic.mutation
}

// Save creates the Identifier in the database.
func (ic *IdentifierCreate) Save(ctx context.Context) (*Identifier, error) {
	if err := ic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IdentifierCreate) SaveX(ctx context.Context) *Identifier {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IdentifierCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IdentifierCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IdentifierCreate) defaults() error {
	if _, ok := ic.mutation.ID(); !ok {
		if identifier.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized identifier.DefaultID (forgotten import ent/runtime?)")
		}
		v := identifier.DefaultID()
		ic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ic *IdentifierCreate) check() error {
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Identifier.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := identifier.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Identifier.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Identifier.value"`)}
	}
	if v, ok := ic.mutation.Value(); ok {
		if err := identifier.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Identifier.value": %w`, err)}
		}
	}
	if _, ok := ic.mutation.BookID(); !ok {
		return &ValidationError{Name: "book", err: errors.New(`ent: missing required edge "Identifier.book"`)}
	}
	return nil
}

func (ic *IdentifierCreate) sqlSave(ctx context.Context) (*Identifier, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Identifier.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IdentifierCreate) createSpec() (*Identifier, *sqlgraph.CreateSpec) {
	var (
		_node = &Identifier{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(identifier.Table, sqlgraph.NewFieldSpec(identifier.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(identifier.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Value(); ok {
		_spec.SetField(identifier.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ic.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifier.BookTable,
			Columns: []string{identifier.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.identifier_book = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdentifierCreateBulk is the builder for creating many Identifier entities in bulk.
type IdentifierCreateBulk struct {
	config
	err      error
	builders []*IdentifierCreate
}

// Save creates the Identifier entities in the database.
func (icb *IdentifierCreateBulk) Save(ctx context.Context) ([]*Identifier, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Identifier, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentifierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IdentifierCreateBulk) SaveX(ctx context.Context) []*Identifier {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IdentifierCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IdentifierCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
