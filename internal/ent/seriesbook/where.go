// Code generated by ent, DO NOT EDIT.

package seriesbook

import (
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/schema/ksuid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// SeriesIndex applies equality check predicate on the "series_index" field. It's identical to SeriesIndexEQ.
func SeriesIndex(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldEQ(FieldSeriesIndex, v))
}

// SeriesID applies equality check predicate on the "series_id" field. It's identical to SeriesIDEQ.
func SeriesID(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldEQ(FieldSeriesID, vc))
}

// BookID applies equality check predicate on the "book_id" field. It's identical to BookIDEQ.
func BookID(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldEQ(FieldBookID, vc))
}

// SeriesIndexEQ applies the EQ predicate on the "series_index" field.
func SeriesIndexEQ(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldEQ(FieldSeriesIndex, v))
}

// SeriesIndexNEQ applies the NEQ predicate on the "series_index" field.
func SeriesIndexNEQ(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNEQ(FieldSeriesIndex, v))
}

// SeriesIndexIn applies the In predicate on the "series_index" field.
func SeriesIndexIn(vs ...float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldIn(FieldSeriesIndex, vs...))
}

// SeriesIndexNotIn applies the NotIn predicate on the "series_index" field.
func SeriesIndexNotIn(vs ...float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNotIn(FieldSeriesIndex, vs...))
}

// SeriesIndexGT applies the GT predicate on the "series_index" field.
func SeriesIndexGT(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldGT(FieldSeriesIndex, v))
}

// SeriesIndexGTE applies the GTE predicate on the "series_index" field.
func SeriesIndexGTE(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldGTE(FieldSeriesIndex, v))
}

// SeriesIndexLT applies the LT predicate on the "series_index" field.
func SeriesIndexLT(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldLT(FieldSeriesIndex, v))
}

// SeriesIndexLTE applies the LTE predicate on the "series_index" field.
func SeriesIndexLTE(v float64) predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldLTE(FieldSeriesIndex, v))
}

// SeriesIndexIsNil applies the IsNil predicate on the "series_index" field.
func SeriesIndexIsNil() predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldIsNull(FieldSeriesIndex))
}

// SeriesIndexNotNil applies the NotNil predicate on the "series_index" field.
func SeriesIndexNotNil() predicate.SeriesBook {
	return predicate.SeriesBook(sql.FieldNotNull(FieldSeriesIndex))
}

// SeriesIDEQ applies the EQ predicate on the "series_id" field.
func SeriesIDEQ(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldEQ(FieldSeriesID, vc))
}

// SeriesIDNEQ applies the NEQ predicate on the "series_id" field.
func SeriesIDNEQ(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldNEQ(FieldSeriesID, vc))
}

// SeriesIDIn applies the In predicate on the "series_id" field.
func SeriesIDIn(vs ...ksuid.ID) predicate.SeriesBook {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SeriesBook(sql.FieldIn(FieldSeriesID, v...))
}

// SeriesIDNotIn applies the NotIn predicate on the "series_id" field.
func SeriesIDNotIn(vs ...ksuid.ID) predicate.SeriesBook {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SeriesBook(sql.FieldNotIn(FieldSeriesID, v...))
}

// SeriesIDGT applies the GT predicate on the "series_id" field.
func SeriesIDGT(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldGT(FieldSeriesID, vc))
}

// SeriesIDGTE applies the GTE predicate on the "series_id" field.
func SeriesIDGTE(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldGTE(FieldSeriesID, vc))
}

// SeriesIDLT applies the LT predicate on the "series_id" field.
func SeriesIDLT(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldLT(FieldSeriesID, vc))
}

// SeriesIDLTE applies the LTE predicate on the "series_id" field.
func SeriesIDLTE(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldLTE(FieldSeriesID, vc))
}

// SeriesIDContains applies the Contains predicate on the "series_id" field.
func SeriesIDContains(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldContains(FieldSeriesID, vc))
}

// SeriesIDHasPrefix applies the HasPrefix predicate on the "series_id" field.
func SeriesIDHasPrefix(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldHasPrefix(FieldSeriesID, vc))
}

// SeriesIDHasSuffix applies the HasSuffix predicate on the "series_id" field.
func SeriesIDHasSuffix(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldHasSuffix(FieldSeriesID, vc))
}

// SeriesIDEqualFold applies the EqualFold predicate on the "series_id" field.
func SeriesIDEqualFold(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldEqualFold(FieldSeriesID, vc))
}

// SeriesIDContainsFold applies the ContainsFold predicate on the "series_id" field.
func SeriesIDContainsFold(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldContainsFold(FieldSeriesID, vc))
}

// BookIDEQ applies the EQ predicate on the "book_id" field.
func BookIDEQ(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldEQ(FieldBookID, vc))
}

// BookIDNEQ applies the NEQ predicate on the "book_id" field.
func BookIDNEQ(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldNEQ(FieldBookID, vc))
}

// BookIDIn applies the In predicate on the "book_id" field.
func BookIDIn(vs ...ksuid.ID) predicate.SeriesBook {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SeriesBook(sql.FieldIn(FieldBookID, v...))
}

// BookIDNotIn applies the NotIn predicate on the "book_id" field.
func BookIDNotIn(vs ...ksuid.ID) predicate.SeriesBook {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SeriesBook(sql.FieldNotIn(FieldBookID, v...))
}

// BookIDGT applies the GT predicate on the "book_id" field.
func BookIDGT(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldGT(FieldBookID, vc))
}

// BookIDGTE applies the GTE predicate on the "book_id" field.
func BookIDGTE(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldGTE(FieldBookID, vc))
}

// BookIDLT applies the LT predicate on the "book_id" field.
func BookIDLT(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldLT(FieldBookID, vc))
}

// BookIDLTE applies the LTE predicate on the "book_id" field.
func BookIDLTE(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldLTE(FieldBookID, vc))
}

// BookIDContains applies the Contains predicate on the "book_id" field.
func BookIDContains(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldContains(FieldBookID, vc))
}

// BookIDHasPrefix applies the HasPrefix predicate on the "book_id" field.
func BookIDHasPrefix(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldHasPrefix(FieldBookID, vc))
}

// BookIDHasSuffix applies the HasSuffix predicate on the "book_id" field.
func BookIDHasSuffix(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldHasSuffix(FieldBookID, vc))
}

// BookIDEqualFold applies the EqualFold predicate on the "book_id" field.
func BookIDEqualFold(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldEqualFold(FieldBookID, vc))
}

// BookIDContainsFold applies the ContainsFold predicate on the "book_id" field.
func BookIDContainsFold(v ksuid.ID) predicate.SeriesBook {
	vc := string(v)
	return predicate.SeriesBook(sql.FieldContainsFold(FieldBookID, vc))
}

// HasSeries applies the HasEdge predicate on the "series" edge.
func HasSeries() predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, SeriesColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeriesWith applies the HasEdge predicate on the "series" edge with a given conditions (other predicates).
func HasSeriesWith(preds ...predicate.Series) predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := newSeriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBook applies the HasEdge predicate on the "book" edge.
func HasBook() predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, BookColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, BookTable, BookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookWith applies the HasEdge predicate on the "book" edge with a given conditions (other predicates).
func HasBookWith(preds ...predicate.Book) predicate.SeriesBook {
	return predicate.SeriesBook(func(s *sql.Selector) {
		step := newBookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SeriesBook) predicate.SeriesBook {
	return predicate.SeriesBook(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SeriesBook) predicate.SeriesBook {
	return predicate.SeriesBook(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SeriesBook) predicate.SeriesBook {
	return predicate.SeriesBook(sql.NotPredicates(p))
}
