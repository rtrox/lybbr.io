// Code generated by ent, DO NOT EDIT.

package seriesbook

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the seriesbook type in the database.
	Label = "series_book"
	// FieldSeriesIndex holds the string denoting the series_index field in the database.
	FieldSeriesIndex = "series_index"
	// FieldSeriesID holds the string denoting the series_id field in the database.
	FieldSeriesID = "series_id"
	// FieldBookID holds the string denoting the book_id field in the database.
	FieldBookID = "book_id"
	// EdgeSeries holds the string denoting the series edge name in mutations.
	EdgeSeries = "series"
	// EdgeBook holds the string denoting the book edge name in mutations.
	EdgeBook = "book"
	// SeriesFieldID holds the string denoting the ID field of the Series.
	SeriesFieldID = "id"
	// BookFieldID holds the string denoting the ID field of the Book.
	BookFieldID = "id"
	// Table holds the table name of the seriesbook in the database.
	Table = "series_books"
	// SeriesTable is the table that holds the series relation/edge.
	SeriesTable = "series_books"
	// SeriesInverseTable is the table name for the Series entity.
	// It exists in this package in order to avoid circular dependency with the "series" package.
	SeriesInverseTable = "series"
	// SeriesColumn is the table column denoting the series relation/edge.
	SeriesColumn = "series_id"
	// BookTable is the table that holds the book relation/edge.
	BookTable = "series_books"
	// BookInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	BookInverseTable = "books"
	// BookColumn is the table column denoting the book relation/edge.
	BookColumn = "book_id"
)

// Columns holds all SQL columns for seriesbook fields.
var Columns = []string{
	FieldSeriesIndex,
	FieldSeriesID,
	FieldBookID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "lybbrio/internal/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// SeriesIndexValidator is a validator for the "series_index" field. It is called by the builders before save.
	SeriesIndexValidator func(float64) error
	// SeriesIDValidator is a validator for the "series_id" field. It is called by the builders before save.
	SeriesIDValidator func(string) error
	// BookIDValidator is a validator for the "book_id" field. It is called by the builders before save.
	BookIDValidator func(string) error
)

// OrderOption defines the ordering options for the SeriesBook queries.
type OrderOption func(*sql.Selector)

// BySeriesIndex orders the results by the series_index field.
func BySeriesIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeriesIndex, opts...).ToFunc()
}

// BySeriesID orders the results by the series_id field.
func BySeriesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeriesID, opts...).ToFunc()
}

// ByBookID orders the results by the book_id field.
func ByBookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookID, opts...).ToFunc()
}

// BySeriesField orders the results by series field.
func BySeriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeriesStep(), sql.OrderByField(field, opts...))
	}
}

// ByBookField orders the results by book field.
func ByBookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookStep(), sql.OrderByField(field, opts...))
	}
}
func newSeriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, SeriesColumn),
		sqlgraph.To(SeriesInverseTable, SeriesFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SeriesTable, SeriesColumn),
	)
}
func newBookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, BookColumn),
		sqlgraph.To(BookInverseTable, BookFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BookTable, BookColumn),
	)
}
